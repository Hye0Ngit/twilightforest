// 
// Decompiled by Procyon v0.6-prerelease
// 

package twilightforest.block;

import net.minecraftforge.registries.ForgeRegistries;
import twilightforest.enums.FireJetVariant;
import net.minecraft.world.level.block.SkullBlock;
import twilightforest.enums.TowerDeviceVariant;
import net.minecraft.world.level.block.HalfTransparentBlock;
import net.minecraft.world.level.block.HugeMushroomBlock;
import net.minecraft.core.BlockPos;
import net.minecraft.world.level.BlockGetter;
import twilightforest.enums.BossVariant;
import twilightforest.world.components.feature.trees.growers.SmallOakTree;
import twilightforest.world.components.feature.trees.growers.CanopyTree;
import twilightforest.world.components.feature.trees.growers.MangroveTree;
import twilightforest.world.components.feature.trees.growers.DarkCanopyTree;
import twilightforest.world.components.feature.trees.growers.HollowTree;
import twilightforest.world.components.feature.trees.growers.TimeTree;
import twilightforest.world.components.feature.trees.growers.TransformationTree;
import twilightforest.world.components.feature.trees.growers.MinersTree;
import twilightforest.world.components.feature.trees.growers.SortingTree;
import net.minecraft.world.level.block.grower.AbstractTreeGrower;
import twilightforest.world.components.feature.trees.growers.RainboakTree;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.SlabBlock;
import net.minecraft.world.level.block.WoodButtonBlock;
import net.minecraft.world.level.block.FenceBlock;
import net.minecraft.world.level.block.FenceGateBlock;
import net.minecraft.world.level.block.PressurePlateBlock;
import net.minecraft.world.level.block.state.BlockState;
import java.util.function.Supplier;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.FireBlock;
import twilightforest.item.TFItems;
import net.minecraft.world.level.block.ComposterBlock;
import net.minecraft.world.level.ItemLike;
import net.minecraft.core.Direction;
import net.minecraft.world.level.block.state.properties.Property;
import net.minecraft.world.level.material.Material;
import net.minecraft.world.level.material.MaterialColor;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import twilightforest.compat.TFCompat;
import net.minecraft.world.item.Item;
import net.minecraftforge.event.RegistryEvent;
import net.minecraft.world.level.block.FlowerPotBlock;
import net.minecraft.world.level.block.WallSignBlock;
import net.minecraft.world.level.block.StandingSignBlock;
import net.minecraft.world.level.block.TrapDoorBlock;
import net.minecraft.world.level.block.DoorBlock;
import net.minecraft.world.level.block.SaplingBlock;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.WoodType;
import net.minecraft.world.level.block.StairBlock;
import net.minecraft.world.level.block.RotatedPillarBlock;
import net.minecraftforge.fmllegacy.RegistryObject;
import net.minecraft.world.level.block.Block;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.fml.common.Mod;
import javax.annotation.Nonnull;

@Nonnull
@Mod.EventBusSubscriber(modid = "twilightforest", bus = Mod.EventBusSubscriber.Bus.MOD)
public class TFBlocks
{
    public static final DeferredRegister<Block> BLOCKS;
    public static final RegistryObject<TFPortalBlock> TWILIGHT_PORTAL;
    public static final RegistryObject<Block> HEDGE;
    public static final RegistryObject<Block> FIREFLY_JAR;
    public static final RegistryObject<Block> FIREFLY_SPAWNER;
    public static final RegistryObject<Block> CICADA_JAR;
    public static final RegistryObject<Block> MOSS_PATCH;
    public static final RegistryObject<Block> MAYAPPLE;
    public static final RegistryObject<Block> CLOVER_PATCH;
    public static final RegistryObject<Block> FIDDLEHEAD;
    public static final RegistryObject<Block> MUSHGLOOM;
    public static final RegistryObject<Block> TORCHBERRY_PLANT;
    public static final RegistryObject<Block> ROOT_STRAND;
    public static final RegistryObject<Block> FALLEN_LEAVES;
    public static final RegistryObject<Block> ROOT_BLOCK;
    public static final RegistryObject<Block> LIVEROOT_BLOCK;
    public static final RegistryObject<Block> UNCRAFTING_TABLE;
    public static final RegistryObject<Block> SMOKER;
    public static final RegistryObject<Block> ENCASED_SMOKER;
    public static final RegistryObject<Block> FIRE_JET;
    public static final RegistryObject<Block> ENCASED_FIRE_JET;
    public static final RegistryObject<Block> FIREFLY;
    public static final RegistryObject<Block> CICADA;
    public static final RegistryObject<Block> MOONWORM;
    public static final RegistryObject<HugeLilyPadBlock> HUGE_LILY_PAD;
    public static final RegistryObject<Block> HUGE_WATER_LILY;
    public static final RegistryObject<RotatedPillarBlock> SLIDER;
    public static final RegistryObject<Block> IRON_LADDER;
    public static final RegistryObject<Block> NAGASTONE_HEAD;
    public static final RegistryObject<Block> NAGASTONE;
    public static final RegistryObject<Block> SPIRAL_BRICKS;
    public static final RegistryObject<Block> ETCHED_NAGASTONE;
    public static final RegistryObject<Block> NAGASTONE_PILLAR;
    public static final RegistryObject<StairBlock> NAGASTONE_STAIRS_LEFT;
    public static final RegistryObject<StairBlock> NAGASTONE_STAIRS_RIGHT;
    public static final RegistryObject<Block> MOSSY_ETCHED_NAGASTONE;
    public static final RegistryObject<Block> MOSSY_NAGASTONE_PILLAR;
    public static final RegistryObject<StairBlock> MOSSY_NAGASTONE_STAIRS_LEFT;
    public static final RegistryObject<StairBlock> MOSSY_NAGASTONE_STAIRS_RIGHT;
    public static final RegistryObject<Block> CRACKED_ETCHED_NAGASTONE;
    public static final RegistryObject<Block> CRACKED_NAGASTONE_PILLAR;
    public static final RegistryObject<StairBlock> CRACKED_NAGASTONE_STAIRS_LEFT;
    public static final RegistryObject<StairBlock> CRACKED_NAGASTONE_STAIRS_RIGHT;
    public static final RegistryObject<RotatedPillarBlock> TWISTED_STONE;
    public static final RegistryObject<Block> TWISTED_STONE_PILLAR;
    public static final RegistryObject<KeepsakeCasketBlock> KEEPSAKE_CASKET;
    public static final RegistryObject<RotatedPillarBlock> BOLD_STONE_PILLAR;
    public static final RegistryObject<Block> DEATH_TOME_SPAWNER;
    public static final RegistryObject<Block> EMPTY_CANOPY_BOOKSHELF;
    public static final RegistryObject<CandelabraBlock> CANDELABRA;
    public static final RegistryObject<AbstractSkullCandleBlock> ZOMBIE_SKULL_CANDLE;
    public static final RegistryObject<AbstractSkullCandleBlock> ZOMBIE_WALL_SKULL_CANDLE;
    public static final RegistryObject<AbstractSkullCandleBlock> SKELETON_SKULL_CANDLE;
    public static final RegistryObject<AbstractSkullCandleBlock> SKELETON_WALL_SKULL_CANDLE;
    public static final RegistryObject<AbstractSkullCandleBlock> WITHER_SKELE_SKULL_CANDLE;
    public static final RegistryObject<AbstractSkullCandleBlock> WITHER_SKELE_WALL_SKULL_CANDLE;
    public static final RegistryObject<AbstractSkullCandleBlock> CREEPER_SKULL_CANDLE;
    public static final RegistryObject<AbstractSkullCandleBlock> CREEPER_WALL_SKULL_CANDLE;
    public static final RegistryObject<AbstractSkullCandleBlock> PLAYER_SKULL_CANDLE;
    public static final RegistryObject<AbstractSkullCandleBlock> PLAYER_WALL_SKULL_CANDLE;
    public static final RegistryObject<Block> MAZESTONE;
    public static final RegistryObject<Block> MAZESTONE_BRICK;
    public static final RegistryObject<Block> CUT_MAZESTONE;
    public static final RegistryObject<Block> DECORATIVE_MAZESTONE;
    public static final RegistryObject<Block> CRACKED_MAZESTONE;
    public static final RegistryObject<Block> MOSSY_MAZESTONE;
    public static final RegistryObject<Block> MAZESTONE_MOSAIC;
    public static final RegistryObject<Block> MAZESTONE_BORDER;
    public static final RegistryObject<Block> STRONGHOLD_SHIELD;
    public static final RegistryObject<Block> TROPHY_PEDESTAL;
    public static final RegistryObject<Block> UNDERBRICK;
    public static final RegistryObject<Block> MOSSY_UNDERBRICK;
    public static final RegistryObject<Block> CRACKED_UNDERBRICK;
    public static final RegistryObject<Block> UNDERBRICK_FLOOR;
    public static final RegistryObject<Block> TOWERWOOD;
    public static final RegistryObject<Block> ENCASED_TOWERWOOD;
    public static final RegistryObject<Block> CRACKED_TOWERWOOD;
    public static final RegistryObject<Block> MOSSY_TOWERWOOD;
    public static final RegistryObject<Block> INFESTED_TOWERWOOD;
    public static final RegistryObject<Block> REAPPEARING_BLOCK;
    public static final RegistryObject<Block> VANISHING_BLOCK;
    public static final RegistryObject<Block> LOCKED_VANISHING_BLOCK;
    public static final RegistryObject<Block> CARMINITE_BUILDER;
    public static final RegistryObject<Block> BUILT_BLOCK;
    public static final RegistryObject<Block> ANTIBUILDER;
    public static final RegistryObject<Block> ANTIBUILT_BLOCK;
    public static final RegistryObject<GhastTrapBlock> GHAST_TRAP;
    public static final RegistryObject<Block> CARMINITE_REACTOR;
    public static final RegistryObject<Block> REACTOR_DEBRIS;
    public static final RegistryObject<Block> FAKE_GOLD;
    public static final RegistryObject<Block> FAKE_DIAMOND;
    public static final RegistryObject<Block> EXPERIMENT_115;
    public static final RegistryObject<Block> AURORA_BLOCK;
    public static final RegistryObject<RotatedPillarBlock> AURORA_PILLAR;
    public static final RegistryObject<Block> AURORA_SLAB;
    public static final RegistryObject<Block> AURORALIZED_GLASS;
    public static final RegistryObject<Block> BROWN_THORNS;
    public static final RegistryObject<Block> GREEN_THORNS;
    public static final RegistryObject<Block> BURNT_THORNS;
    public static final RegistryObject<Block> THORN_ROSE;
    public static final RegistryObject<Block> THORN_LEAVES;
    public static final RegistryObject<Block> BEANSTALK_LEAVES;
    public static final RegistryObject<Block> DEADROCK;
    public static final RegistryObject<Block> CRACKED_DEADROCK;
    public static final RegistryObject<Block> WEATHERED_DEADROCK;
    public static final RegistryObject<Block> TROLLSTEINN;
    public static final RegistryObject<Block> WISPY_CLOUD;
    public static final RegistryObject<Block> FLUFFY_CLOUD;
    public static final RegistryObject<Block> GIANT_COBBLESTONE;
    public static final RegistryObject<Block> GIANT_LOG;
    public static final RegistryObject<Block> GIANT_LEAVES;
    public static final RegistryObject<Block> GIANT_OBSIDIAN;
    public static final RegistryObject<Block> UBEROUS_SOIL;
    public static final RegistryObject<RotatedPillarBlock> HUGE_STALK;
    public static final RegistryObject<Block> HUGE_MUSHGLOOM;
    public static final RegistryObject<Block> HUGE_MUSHGLOOM_STEM;
    public static final RegistryObject<Block> TROLLVIDR;
    public static final RegistryObject<Block> UNRIPE_TROLLBER;
    public static final RegistryObject<Block> TROLLBER;
    public static final RegistryObject<Block> CASTLE_BRICK;
    public static final RegistryObject<Block> WORN_CASTLE_BRICK;
    public static final RegistryObject<Block> CRACKED_CASTLE_BRICK;
    public static final RegistryObject<Block> CASTLE_ROOF_TILE;
    public static final RegistryObject<Block> MOSSY_CASTLE_BRICK;
    public static final RegistryObject<Block> THICK_CASTLE_BRICK;
    public static final RegistryObject<Block> ENCASED_CASTLE_BRICK_PILLAR;
    public static final RegistryObject<Block> ENCASED_CASTLE_BRICK_TILE;
    public static final RegistryObject<Block> BOLD_CASTLE_BRICK_PILLAR;
    public static final RegistryObject<Block> BOLD_CASTLE_BRICK_TILE;
    public static final RegistryObject<StairBlock> CASTLE_BRICK_STAIRS;
    public static final RegistryObject<StairBlock> WORN_CASTLE_BRICK_STAIRS;
    public static final RegistryObject<StairBlock> CRACKED_CASTLE_BRICK_STAIRS;
    public static final RegistryObject<StairBlock> MOSSY_CASTLE_BRICK_STAIRS;
    public static final RegistryObject<StairBlock> ENCASED_CASTLE_BRICK_STAIRS;
    public static final RegistryObject<StairBlock> BOLD_CASTLE_BRICK_STAIRS;
    public static final RegistryObject<Block> PINK_CASTLE_RUNE_BRICK;
    public static final RegistryObject<Block> BLUE_CASTLE_RUNE_BRICK;
    public static final RegistryObject<Block> YELLOW_CASTLE_RUNE_BRICK;
    public static final RegistryObject<Block> VIOLET_CASTLE_RUNE_BRICK;
    public static final RegistryObject<Block> VIOLET_FORCE_FIELD;
    public static final RegistryObject<Block> PINK_FORCE_FIELD;
    public static final RegistryObject<Block> ORANGE_FORCE_FIELD;
    public static final RegistryObject<Block> GREEN_FORCE_FIELD;
    public static final RegistryObject<Block> BLUE_FORCE_FIELD;
    public static final RegistryObject<Block> CINDER_FURNACE;
    public static final RegistryObject<RotatedPillarBlock> CINDER_LOG;
    public static final RegistryObject<Block> CINDER_WOOD;
    public static final RegistryObject<Block> YELLOW_CASTLE_DOOR;
    public static final RegistryObject<Block> VIOLET_CASTLE_DOOR;
    public static final RegistryObject<Block> PINK_CASTLE_DOOR;
    public static final RegistryObject<Block> BLUE_CASTLE_DOOR;
    public static final RegistryObject<Block> TWILIGHT_PORTAL_MINIATURE_STRUCTURE;
    public static final RegistryObject<Block> NAGA_COURTYARD_MINIATURE_STRUCTURE;
    public static final RegistryObject<Block> LICH_TOWER_MINIATURE_STRUCTURE;
    public static final RegistryObject<Block> KNIGHTMETAL_BLOCK;
    public static final RegistryObject<Block> IRONWOOD_BLOCK;
    public static final RegistryObject<Block> FIERY_BLOCK;
    public static final RegistryObject<Block> STEELEAF_BLOCK;
    public static final RegistryObject<Block> ARCTIC_FUR_BLOCK;
    public static final RegistryObject<Block> CARMINITE_BLOCK;
    public static final RegistryObject<Block> NAGA_BOSS_SPAWNER;
    public static final RegistryObject<Block> LICH_BOSS_SPAWNER;
    public static final RegistryObject<Block> HYDRA_BOSS_SPAWNER;
    public static final RegistryObject<Block> UR_GHAST_BOSS_SPAWNER;
    public static final RegistryObject<Block> KNIGHT_PHANTOM_BOSS_SPAWNER;
    public static final RegistryObject<Block> SNOW_QUEEN_BOSS_SPAWNER;
    public static final RegistryObject<Block> MINOSHROOM_BOSS_SPAWNER;
    public static final RegistryObject<Block> ALPHA_YETI_BOSS_SPAWNER;
    public static final RegistryObject<Block> FINAL_BOSS_BOSS_SPAWNER;
    public static final RegistryObject<TrophyBlock> NAGA_TROPHY;
    public static final RegistryObject<TrophyBlock> LICH_TROPHY;
    public static final RegistryObject<TrophyBlock> HYDRA_TROPHY;
    public static final RegistryObject<TrophyBlock> UR_GHAST_TROPHY;
    public static final RegistryObject<TrophyBlock> KNIGHT_PHANTOM_TROPHY;
    public static final RegistryObject<TrophyBlock> SNOW_QUEEN_TROPHY;
    public static final RegistryObject<TrophyBlock> MINOSHROOM_TROPHY;
    public static final RegistryObject<TrophyBlock> ALPHA_YETI_TROPHY;
    public static final RegistryObject<TrophyBlock> QUEST_RAM_TROPHY;
    public static final RegistryObject<TrophyWallBlock> NAGA_WALL_TROPHY;
    public static final RegistryObject<TrophyWallBlock> LICH_WALL_TROPHY;
    public static final RegistryObject<TrophyWallBlock> HYDRA_WALL_TROPHY;
    public static final RegistryObject<TrophyWallBlock> UR_GHAST_WALL_TROPHY;
    public static final RegistryObject<TrophyWallBlock> KNIGHT_PHANTOM_WALL_TROPHY;
    public static final RegistryObject<TrophyWallBlock> SNOW_QUEEN_WALL_TROPHY;
    public static final RegistryObject<TrophyWallBlock> MINOSHROOM_WALL_TROPHY;
    public static final RegistryObject<TrophyWallBlock> ALPHA_YETI_WALL_TROPHY;
    public static final RegistryObject<TrophyWallBlock> QUEST_RAM_WALL_TROPHY;
    public static final RegistryObject<BanisterBlock> OAK_BANISTER;
    public static final RegistryObject<BanisterBlock> SPRUCE_BANISTER;
    public static final RegistryObject<BanisterBlock> BIRCH_BANISTER;
    public static final RegistryObject<BanisterBlock> JUNGLE_BANISTER;
    public static final RegistryObject<BanisterBlock> ACACIA_BANISTER;
    public static final RegistryObject<BanisterBlock> DARK_OAK_BANISTER;
    public static final RegistryObject<BanisterBlock> CRIMSON_BANISTER;
    public static final RegistryObject<BanisterBlock> WARPED_BANISTER;
    public static final WoodType TWILIGHT_OAK;
    public static final WoodType CANOPY;
    public static final WoodType MANGROVE;
    public static final WoodType DARKWOOD;
    public static final WoodType TIMEWOOD;
    public static final WoodType TRANSFORMATION;
    public static final WoodType MINING;
    public static final WoodType SORTING;
    public static final BlockBehaviour.Properties TWILIGHT_OAK_LOG_PROPS;
    public static final BlockBehaviour.Properties CANOPY_LOG_PROPS;
    public static final BlockBehaviour.Properties MANGROVE_LOG_PROPS;
    public static final BlockBehaviour.Properties DARK_LOG_PROPS;
    public static final BlockBehaviour.Properties TIME_LOG_PROPS;
    public static final BlockBehaviour.Properties TRANSFORMATION_LOG_PROPS;
    public static final BlockBehaviour.Properties MINING_LOG_PROPS;
    public static final BlockBehaviour.Properties SORTING_LOG_PROPS;
    public static final BlockBehaviour.Properties TWILIGHT_OAK_BARK_PROPS;
    public static final BlockBehaviour.Properties CANOPY_BARK_PROPS;
    public static final BlockBehaviour.Properties MANGROVE_BARK_PROPS;
    public static final BlockBehaviour.Properties DARK_BARK_PROPS;
    public static final BlockBehaviour.Properties TIME_BARK_PROPS;
    public static final BlockBehaviour.Properties TRANSFORMATION_BARK_PROPS;
    public static final BlockBehaviour.Properties MINING_BARK_PROPS;
    public static final BlockBehaviour.Properties SORTING_BARK_PROPS;
    public static final BlockBehaviour.Properties TWILIGHT_OAK_STRIPPED_PROPS;
    public static final BlockBehaviour.Properties CANOPY_STRIPPED_PROPS;
    public static final BlockBehaviour.Properties MANGROVE_STRIPPED_PROPS;
    public static final BlockBehaviour.Properties DARK_STRIPPED_PROPS;
    public static final BlockBehaviour.Properties TIME_STRIPPED_PROPS;
    public static final BlockBehaviour.Properties TRANSFORMATION_STRIPPED_PROPS;
    public static final BlockBehaviour.Properties MINING_STRIPPED_PROPS;
    public static final BlockBehaviour.Properties SORTING_STRIPPED_PROPS;
    public static final RegistryObject<RotatedPillarBlock> TWILIGHT_OAK_LOG;
    public static final RegistryObject<RotatedPillarBlock> CANOPY_LOG;
    public static final RegistryObject<RotatedPillarBlock> MANGROVE_LOG;
    public static final RegistryObject<RotatedPillarBlock> DARK_LOG;
    public static final RegistryObject<RotatedPillarBlock> TIME_LOG;
    public static final RegistryObject<RotatedPillarBlock> TRANSFORMATION_LOG;
    public static final RegistryObject<RotatedPillarBlock> MINING_LOG;
    public static final RegistryObject<RotatedPillarBlock> SORTING_LOG;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_TWILIGHT_OAK_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_CANOPY_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_MANGROVE_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_DARK_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_TIME_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_TRANSFORMATION_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_MINING_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_SORTING_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_TWILIGHT_OAK_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_CANOPY_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_MANGROVE_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_DARK_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_TIME_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_TRANSFORMATION_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_MINING_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_SORTING_LOG_VERTICAL;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_TWILIGHT_OAK_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_CANOPY_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_MANGROVE_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_DARK_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_TIME_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_TRANSFORMATION_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_MINING_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_SORTING_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_OAK_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_SPRUCE_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_BIRCH_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_JUNGLE_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_ACACIA_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_DARK_OAK_LOG_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_CRIMSON_STEM_HORIZONTAL;
    public static final RegistryObject<HollowLogHorizontal> HOLLOW_WARPED_STEM_HORIZONTAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_OAK_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_SPRUCE_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_BIRCH_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_JUNGLE_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_ACACIA_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_DARK_OAK_LOG_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_CRIMSON_STEM_VERTICAL;
    public static final RegistryObject<HollowLogVertical> HOLLOW_WARPED_STEM_VERTICAL;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_OAK_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_SPRUCE_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_BIRCH_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_JUNGLE_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_ACACIA_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_DARK_OAK_LOG_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_CRIMSON_STEM_CLIMBABLE;
    public static final RegistryObject<HollowLogClimbable> HOLLOW_WARPED_STEM_CLIMBABLE;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_TWILIGHT_OAK_LOG;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_CANOPY_LOG;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_MANGROVE_LOG;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_DARK_LOG;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_TIME_LOG;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_TRANSFORMATION_LOG;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_MINING_LOG;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_SORTING_LOG;
    public static final RegistryObject<RotatedPillarBlock> TWILIGHT_OAK_WOOD;
    public static final RegistryObject<RotatedPillarBlock> CANOPY_WOOD;
    public static final RegistryObject<RotatedPillarBlock> MANGROVE_WOOD;
    public static final RegistryObject<RotatedPillarBlock> DARK_WOOD;
    public static final RegistryObject<RotatedPillarBlock> TIME_WOOD;
    public static final RegistryObject<RotatedPillarBlock> TRANSFORMATION_WOOD;
    public static final RegistryObject<RotatedPillarBlock> MINING_WOOD;
    public static final RegistryObject<RotatedPillarBlock> SORTING_WOOD;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_TWILIGHT_OAK_WOOD;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_CANOPY_WOOD;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_MANGROVE_WOOD;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_DARK_WOOD;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_TIME_WOOD;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_TRANSFORMATION_WOOD;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_MINING_WOOD;
    public static final RegistryObject<RotatedPillarBlock> STRIPPED_SORTING_WOOD;
    public static final RegistryObject<Block> TIME_LOG_CORE;
    public static final RegistryObject<Block> TRANSFORMATION_LOG_CORE;
    public static final RegistryObject<Block> MINING_LOG_CORE;
    public static final RegistryObject<Block> SORTING_LOG_CORE;
    public static final RegistryObject<Block> MANGROVE_ROOT;
    public static final RegistryObject<Block> TWILIGHT_OAK_LEAVES;
    public static final RegistryObject<Block> CANOPY_LEAVES;
    public static final RegistryObject<Block> MANGROVE_LEAVES;
    public static final RegistryObject<Block> DARK_LEAVES;
    public static final RegistryObject<Block> HARDENED_DARK_LEAVES;
    public static final RegistryObject<Block> RAINBOW_OAK_LEAVES;
    public static final RegistryObject<Block> TIME_LEAVES;
    public static final RegistryObject<Block> TRANSFORMATION_LEAVES;
    public static final RegistryObject<Block> MINING_LEAVES;
    public static final RegistryObject<Block> SORTING_LEAVES;
    public static final RegistryObject<SaplingBlock> TWILIGHT_OAK_SAPLING;
    public static final RegistryObject<SaplingBlock> CANOPY_SAPLING;
    public static final RegistryObject<SaplingBlock> MANGROVE_SAPLING;
    public static final RegistryObject<SaplingBlock> DARKWOOD_SAPLING;
    public static final RegistryObject<SaplingBlock> HOLLOW_OAK_SAPLING;
    public static final RegistryObject<SaplingBlock> TIME_SAPLING;
    public static final RegistryObject<SaplingBlock> TRANSFORMATION_SAPLING;
    public static final RegistryObject<SaplingBlock> MINING_SAPLING;
    public static final RegistryObject<SaplingBlock> SORTING_SAPLING;
    public static final RegistryObject<SaplingBlock> RAINBOW_OAK_SAPLING;
    public static final RegistryObject<Block> TWILIGHT_OAK_PLANKS;
    public static final RegistryObject<StairBlock> TWILIGHT_OAK_STAIRS;
    public static final RegistryObject<Block> TWILIGHT_OAK_SLAB;
    public static final RegistryObject<Block> TWILIGHT_OAK_BUTTON;
    public static final RegistryObject<Block> TWILIGHT_OAK_FENCE;
    public static final RegistryObject<Block> TWILIGHT_OAK_GATE;
    public static final RegistryObject<Block> TWILIGHT_OAK_PLATE;
    public static final RegistryObject<DoorBlock> TWILIGHT_OAK_DOOR;
    public static final RegistryObject<TrapDoorBlock> TWILIGHT_OAK_TRAPDOOR;
    public static final RegistryObject<StandingSignBlock> TWILIGHT_OAK_SIGN;
    public static final RegistryObject<WallSignBlock> TWILIGHT_WALL_SIGN;
    public static final RegistryObject<BanisterBlock> TWILIGHT_OAK_BANISTER;
    public static final RegistryObject<Block> CANOPY_PLANKS;
    public static final RegistryObject<StairBlock> CANOPY_STAIRS;
    public static final RegistryObject<Block> CANOPY_SLAB;
    public static final RegistryObject<Block> CANOPY_BUTTON;
    public static final RegistryObject<Block> CANOPY_FENCE;
    public static final RegistryObject<Block> CANOPY_GATE;
    public static final RegistryObject<Block> CANOPY_PLATE;
    public static final RegistryObject<DoorBlock> CANOPY_DOOR;
    public static final RegistryObject<TrapDoorBlock> CANOPY_TRAPDOOR;
    public static final RegistryObject<StandingSignBlock> CANOPY_SIGN;
    public static final RegistryObject<WallSignBlock> CANOPY_WALL_SIGN;
    public static final RegistryObject<Block> CANOPY_BOOKSHELF;
    public static final RegistryObject<BanisterBlock> CANOPY_BANISTER;
    public static final RegistryObject<Block> MANGROVE_PLANKS;
    public static final RegistryObject<StairBlock> MANGROVE_STAIRS;
    public static final RegistryObject<Block> MANGROVE_SLAB;
    public static final RegistryObject<Block> MANGROVE_BUTTON;
    public static final RegistryObject<Block> MANGROVE_FENCE;
    public static final RegistryObject<Block> MANGROVE_GATE;
    public static final RegistryObject<Block> MANGROVE_PLATE;
    public static final RegistryObject<DoorBlock> MANGROVE_DOOR;
    public static final RegistryObject<TrapDoorBlock> MANGROVE_TRAPDOOR;
    public static final RegistryObject<StandingSignBlock> MANGROVE_SIGN;
    public static final RegistryObject<WallSignBlock> MANGROVE_WALL_SIGN;
    public static final RegistryObject<BanisterBlock> MANGROVE_BANISTER;
    public static final RegistryObject<Block> DARK_PLANKS;
    public static final RegistryObject<StairBlock> DARK_STAIRS;
    public static final RegistryObject<Block> DARK_SLAB;
    public static final RegistryObject<Block> DARK_BUTTON;
    public static final RegistryObject<Block> DARK_FENCE;
    public static final RegistryObject<Block> DARK_GATE;
    public static final RegistryObject<Block> DARK_PLATE;
    public static final RegistryObject<DoorBlock> DARK_DOOR;
    public static final RegistryObject<TrapDoorBlock> DARK_TRAPDOOR;
    public static final RegistryObject<StandingSignBlock> DARKWOOD_SIGN;
    public static final RegistryObject<WallSignBlock> DARKWOOD_WALL_SIGN;
    public static final RegistryObject<BanisterBlock> DARKWOOD_BANISTER;
    public static final RegistryObject<Block> TIME_PLANKS;
    public static final RegistryObject<StairBlock> TIME_STAIRS;
    public static final RegistryObject<Block> TIME_SLAB;
    public static final RegistryObject<Block> TIME_BUTTON;
    public static final RegistryObject<Block> TIME_FENCE;
    public static final RegistryObject<Block> TIME_GATE;
    public static final RegistryObject<Block> TIME_PLATE;
    public static final RegistryObject<DoorBlock> TIME_DOOR;
    public static final RegistryObject<TrapDoorBlock> TIME_TRAPDOOR;
    public static final RegistryObject<StandingSignBlock> TIME_SIGN;
    public static final RegistryObject<WallSignBlock> TIME_WALL_SIGN;
    public static final RegistryObject<BanisterBlock> TIME_BANISTER;
    public static final RegistryObject<Block> TRANSFORMATION_PLANKS;
    public static final RegistryObject<StairBlock> TRANSFORMATION_STAIRS;
    public static final RegistryObject<Block> TRANSFORMATION_SLAB;
    public static final RegistryObject<Block> TRANSFORMATION_BUTTON;
    public static final RegistryObject<Block> TRANSFORMATION_FENCE;
    public static final RegistryObject<Block> TRANSFORMATION_GATE;
    public static final RegistryObject<Block> TRANSFORMATION_PLATE;
    public static final RegistryObject<DoorBlock> TRANSFORMATION_DOOR;
    public static final RegistryObject<TrapDoorBlock> TRANSFORMATION_TRAPDOOR;
    public static final RegistryObject<StandingSignBlock> TRANSFORMATION_SIGN;
    public static final RegistryObject<WallSignBlock> TRANSFORMATION_WALL_SIGN;
    public static final RegistryObject<BanisterBlock> TRANSFORMATION_BANISTER;
    public static final RegistryObject<Block> MINING_PLANKS;
    public static final RegistryObject<StairBlock> MINING_STAIRS;
    public static final RegistryObject<Block> MINING_SLAB;
    public static final RegistryObject<Block> MINING_BUTTON;
    public static final RegistryObject<Block> MINING_FENCE;
    public static final RegistryObject<Block> MINING_GATE;
    public static final RegistryObject<Block> MINING_PLATE;
    public static final RegistryObject<DoorBlock> MINING_DOOR;
    public static final RegistryObject<TrapDoorBlock> MINING_TRAPDOOR;
    public static final RegistryObject<StandingSignBlock> MINING_SIGN;
    public static final RegistryObject<WallSignBlock> MINING_WALL_SIGN;
    public static final RegistryObject<BanisterBlock> MINING_BANISTER;
    public static final RegistryObject<Block> SORTING_PLANKS;
    public static final RegistryObject<StairBlock> SORTING_STAIRS;
    public static final RegistryObject<Block> SORTING_SLAB;
    public static final RegistryObject<Block> SORTING_BUTTON;
    public static final RegistryObject<Block> SORTING_FENCE;
    public static final RegistryObject<Block> SORTING_GATE;
    public static final RegistryObject<Block> SORTING_PLATE;
    public static final RegistryObject<DoorBlock> SORTING_DOOR;
    public static final RegistryObject<TrapDoorBlock> SORTING_TRAPDOOR;
    public static final RegistryObject<StandingSignBlock> SORTING_SIGN;
    public static final RegistryObject<WallSignBlock> SORTING_WALL_SIGN;
    public static final RegistryObject<BanisterBlock> SORTING_BANISTER;
    public static final RegistryObject<TwilightChest> TWILIGHT_OAK_CHEST;
    public static final RegistryObject<TwilightChest> CANOPY_CHEST;
    public static final RegistryObject<TwilightChest> MANGROVE_CHEST;
    public static final RegistryObject<TwilightChest> DARKWOOD_CHEST;
    public static final RegistryObject<TwilightChest> TIME_CHEST;
    public static final RegistryObject<TwilightChest> TRANSFORMATION_CHEST;
    public static final RegistryObject<TwilightChest> MINING_CHEST;
    public static final RegistryObject<TwilightChest> SORTING_CHEST;
    public static final RegistryObject<FlowerPotBlock> POTTED_TWILIGHT_OAK_SAPLING;
    public static final RegistryObject<FlowerPotBlock> POTTED_CANOPY_SAPLING;
    public static final RegistryObject<FlowerPotBlock> POTTED_MANGROVE_SAPLING;
    public static final RegistryObject<FlowerPotBlock> POTTED_DARKWOOD_SAPLING;
    public static final RegistryObject<FlowerPotBlock> POTTED_HOLLOW_OAK_SAPLING;
    public static final RegistryObject<FlowerPotBlock> POTTED_RAINBOW_OAK_SAPLING;
    public static final RegistryObject<FlowerPotBlock> POTTED_TIME_SAPLING;
    public static final RegistryObject<FlowerPotBlock> POTTED_TRANSFORMATION_SAPLING;
    public static final RegistryObject<FlowerPotBlock> POTTED_MINING_SAPLING;
    public static final RegistryObject<FlowerPotBlock> POTTED_SORTING_SAPLING;
    public static final RegistryObject<FlowerPotBlock> POTTED_MAYAPPLE;
    public static final RegistryObject<FlowerPotBlock> POTTED_FIDDLEHEAD;
    public static final RegistryObject<FlowerPotBlock> POTTED_MUSHGLOOM;
    public static final RegistryObject<FlowerPotBlock> POTTED_THORN;
    public static final RegistryObject<FlowerPotBlock> POTTED_GREEN_THORN;
    public static final RegistryObject<FlowerPotBlock> POTTED_DEAD_THORN;
    
    @SubscribeEvent
    public static void registerItemblocks(final RegistryEvent.Register<Item> evt) {
        TFBlockItems.registerBlockItems(evt);
        TFCompat.initCompatItems(evt);
    }
    
    private static BlockBehaviour.Properties logProperties(final MaterialColor color) {
        return BlockBehaviour.Properties.m_60944_(Material.f_76320_, color);
    }
    
    private static BlockBehaviour.Properties logProperties(final MaterialColor top, final MaterialColor side) {
        return BlockBehaviour.Properties.m_60947_(Material.f_76320_, state -> (state.m_61143_((Property)RotatedPillarBlock.f_55923_) == Direction.Axis.Y) ? top : side);
    }
    
    public static void tfCompostables() {
        ComposterBlock.m_51920_(0.1f, (ItemLike)TFBlocks.FALLEN_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.CANOPY_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.CLOVER_PATCH.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.DARK_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.FIDDLEHEAD.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.HEDGE.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.MANGROVE_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.MAYAPPLE.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.MINING_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.TWILIGHT_OAK_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.RAINBOW_OAK_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.ROOT_STRAND.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.SORTING_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.THORN_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.TIME_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.TRANSFORMATION_LEAVES.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.TWILIGHT_OAK_SAPLING.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.CANOPY_SAPLING.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.MANGROVE_SAPLING.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.DARKWOOD_SAPLING.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFBlocks.RAINBOW_OAK_SAPLING.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.BEANSTALK_LEAVES.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.MOSS_PATCH.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.ROOT_BLOCK.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.THORN_ROSE.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.TROLLVIDR.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.HOLLOW_OAK_SAPLING.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.TIME_SAPLING.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.TRANSFORMATION_SAPLING.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.MINING_SAPLING.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.SORTING_SAPLING.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFBlocks.TORCHBERRY_PLANT.get());
        ComposterBlock.m_51920_(0.65f, (ItemLike)TFBlocks.HUGE_MUSHGLOOM_STEM.get());
        ComposterBlock.m_51920_(0.65f, (ItemLike)TFBlocks.HUGE_WATER_LILY.get());
        ComposterBlock.m_51920_(0.65f, (ItemLike)TFBlocks.LIVEROOT_BLOCK.get());
        ComposterBlock.m_51920_(0.65f, (ItemLike)TFBlocks.MUSHGLOOM.get());
        ComposterBlock.m_51920_(0.65f, (ItemLike)TFBlocks.UBEROUS_SOIL.get());
        ComposterBlock.m_51920_(0.65f, (ItemLike)TFBlocks.HUGE_STALK.get());
        ComposterBlock.m_51920_(0.65f, (ItemLike)TFBlocks.UNRIPE_TROLLBER.get());
        ComposterBlock.m_51920_(0.65f, (ItemLike)TFBlocks.TROLLBER.get());
        ComposterBlock.m_51920_(0.85f, (ItemLike)TFBlocks.HUGE_LILY_PAD.get());
        ComposterBlock.m_51920_(0.85f, (ItemLike)TFBlocks.HUGE_MUSHGLOOM.get());
        ComposterBlock.m_51920_(0.3f, (ItemLike)TFItems.TORCHBERRIES.get());
        ComposterBlock.m_51920_(0.5f, (ItemLike)TFItems.LIVEROOT.get());
        ComposterBlock.m_51920_(0.65f, (ItemLike)TFItems.MAZE_WAFER.get());
        ComposterBlock.m_51920_(0.85f, (ItemLike)TFItems.EXPERIMENT_115.get());
        ComposterBlock.m_51920_(0.85f, (ItemLike)TFItems.MAGIC_BEANS.get());
    }
    
    public static void tfBurnables() {
        final FireBlock fireblock = (FireBlock)Blocks.f_50083_;
        fireblock.m_53444_((Block)TFBlocks.ROOT_BLOCK.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.ARCTIC_FUR_BLOCK.get(), 20, 20);
        fireblock.m_53444_((Block)TFBlocks.LIVEROOT_BLOCK.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.EMPTY_CANOPY_BOOKSHELF.get(), 30, 20);
        fireblock.m_53444_((Block)TFBlocks.DEATH_TOME_SPAWNER.get(), 30, 20);
        fireblock.m_53444_((Block)TFBlocks.TWILIGHT_OAK_WOOD.get(), 5, 5);
        fireblock.m_53444_((Block)TFBlocks.TWILIGHT_OAK_PLANKS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TWILIGHT_OAK_SLAB.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TWILIGHT_OAK_STAIRS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TWILIGHT_OAK_FENCE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TWILIGHT_OAK_GATE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.CANOPY_WOOD.get(), 5, 5);
        fireblock.m_53444_((Block)TFBlocks.CANOPY_PLANKS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.CANOPY_SLAB.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.CANOPY_STAIRS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.CANOPY_FENCE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.CANOPY_GATE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.CANOPY_BOOKSHELF.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MANGROVE_WOOD.get(), 5, 5);
        fireblock.m_53444_((Block)TFBlocks.MANGROVE_PLANKS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MANGROVE_SLAB.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MANGROVE_STAIRS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MANGROVE_FENCE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MANGROVE_GATE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MANGROVE_ROOT.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.DARK_WOOD.get(), 5, 5);
        fireblock.m_53444_((Block)TFBlocks.DARK_PLANKS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.DARK_SLAB.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.DARK_STAIRS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.DARK_FENCE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.DARK_GATE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TIME_WOOD.get(), 5, 5);
        fireblock.m_53444_((Block)TFBlocks.TIME_PLANKS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TIME_SLAB.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TIME_STAIRS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TIME_FENCE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TIME_GATE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TRANSFORMATION_WOOD.get(), 5, 5);
        fireblock.m_53444_((Block)TFBlocks.TRANSFORMATION_PLANKS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TRANSFORMATION_SLAB.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TRANSFORMATION_STAIRS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TRANSFORMATION_FENCE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.TRANSFORMATION_GATE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MINING_WOOD.get(), 5, 5);
        fireblock.m_53444_((Block)TFBlocks.MINING_PLANKS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MINING_SLAB.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MINING_STAIRS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MINING_FENCE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.MINING_GATE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.SORTING_WOOD.get(), 5, 5);
        fireblock.m_53444_((Block)TFBlocks.SORTING_PLANKS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.SORTING_SLAB.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.SORTING_STAIRS.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.SORTING_FENCE.get(), 5, 20);
        fireblock.m_53444_((Block)TFBlocks.SORTING_GATE.get(), 5, 20);
    }
    
    public static void tfPots() {
        final FlowerPotBlock pot = (FlowerPotBlock)Blocks.f_50276_;
        pot.addPlant(TFBlocks.TWILIGHT_OAK_SAPLING.getId(), (Supplier)TFBlocks.POTTED_TWILIGHT_OAK_SAPLING);
        pot.addPlant(TFBlocks.CANOPY_SAPLING.getId(), (Supplier)TFBlocks.POTTED_CANOPY_SAPLING);
        pot.addPlant(TFBlocks.MANGROVE_SAPLING.getId(), (Supplier)TFBlocks.POTTED_MANGROVE_SAPLING);
        pot.addPlant(TFBlocks.DARKWOOD_SAPLING.getId(), (Supplier)TFBlocks.POTTED_DARKWOOD_SAPLING);
        pot.addPlant(TFBlocks.HOLLOW_OAK_SAPLING.getId(), (Supplier)TFBlocks.POTTED_HOLLOW_OAK_SAPLING);
        pot.addPlant(TFBlocks.RAINBOW_OAK_SAPLING.getId(), (Supplier)TFBlocks.POTTED_RAINBOW_OAK_SAPLING);
        pot.addPlant(TFBlocks.TIME_SAPLING.getId(), (Supplier)TFBlocks.POTTED_TIME_SAPLING);
        pot.addPlant(TFBlocks.TRANSFORMATION_SAPLING.getId(), (Supplier)TFBlocks.POTTED_TRANSFORMATION_SAPLING);
        pot.addPlant(TFBlocks.MINING_SAPLING.getId(), (Supplier)TFBlocks.POTTED_MINING_SAPLING);
        pot.addPlant(TFBlocks.SORTING_SAPLING.getId(), (Supplier)TFBlocks.POTTED_SORTING_SAPLING);
        pot.addPlant(TFBlocks.MAYAPPLE.getId(), (Supplier)TFBlocks.POTTED_MAYAPPLE);
        pot.addPlant(TFBlocks.FIDDLEHEAD.getId(), (Supplier)TFBlocks.POTTED_FIDDLEHEAD);
        pot.addPlant(TFBlocks.MUSHGLOOM.getId(), (Supplier)TFBlocks.POTTED_MUSHGLOOM);
        pot.addPlant(TFBlocks.BROWN_THORNS.getId(), (Supplier)TFBlocks.POTTED_THORN);
        pot.addPlant(TFBlocks.GREEN_THORNS.getId(), (Supplier)TFBlocks.POTTED_GREEN_THORN);
        pot.addPlant(TFBlocks.BURNT_THORNS.getId(), (Supplier)TFBlocks.POTTED_DEAD_THORN);
    }
    
    static {
        BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, "twilightforest");
        TWILIGHT_PORTAL = TFBlocks.BLOCKS.register("twilight_portal", () -> new TFPortalBlock(BlockBehaviour.Properties.m_60939_(Material.f_76298_).m_60978_(-1.0f).m_60918_(SoundType.f_56744_).m_60953_(state -> 11).m_60910_().m_60955_().m_60993_()));
        HEDGE = TFBlocks.BLOCKS.register("hedge", () -> new HedgeBlock(BlockBehaviour.Properties.m_60939_(Material.f_76277_).m_60913_(2.0f, 6.0f).m_60918_(SoundType.f_56740_)));
        FIREFLY_JAR = TFBlocks.BLOCKS.register("firefly_jar", () -> new JarBlock(BlockBehaviour.Properties.m_60939_(Material.f_76275_).m_60913_(0.3f, 3.0f).m_60918_(SoundType.f_56724_).m_60953_(state -> 15).m_60955_()));
        FIREFLY_SPAWNER = TFBlocks.BLOCKS.register("firefly_particle_spawner", () -> new FireflySpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76275_).m_60913_(0.3f, 3.0f).m_60918_(SoundType.f_56724_).m_60953_(state -> 15).m_60955_()));
        CICADA_JAR = TFBlocks.BLOCKS.register("cicada_jar", () -> new JarBlock(BlockBehaviour.Properties.m_60939_(Material.f_76275_).m_60913_(0.3f, 3.0f).m_60918_(SoundType.f_56724_).m_60955_().m_60977_()));
        MOSS_PATCH = TFBlocks.BLOCKS.register("moss_patch", () -> new MossPatchBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_154669_).m_60910_().m_60955_()));
        MAYAPPLE = TFBlocks.BLOCKS.register("mayapple", () -> new MayappleBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60955_()));
        CLOVER_PATCH = TFBlocks.BLOCKS.register("clover_patch", () -> new PatchBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60955_()));
        FIDDLEHEAD = TFBlocks.BLOCKS.register("fiddlehead", () -> new FiddleheadBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60955_()));
        MUSHGLOOM = TFBlocks.BLOCKS.register("mushgloom", () -> new MushgloomBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56711_).m_60910_().m_60955_().m_60953_(state -> 3)));
        TORCHBERRY_PLANT = TFBlocks.BLOCKS.register("torchberry_plant", () -> new TorchberryPlantBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_154673_).m_60910_().m_60955_().m_60953_(state -> state.m_61143_((Property)TorchberryPlantBlock.HAS_BERRIES) ? 8 : 0)));
        ROOT_STRAND = TFBlocks.BLOCKS.register("root_strand", () -> new RootStrandBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_154673_).m_60910_().m_60955_()));
        FALLEN_LEAVES = TFBlocks.BLOCKS.register("fallen_leaves", () -> new FallenLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76302_).m_60966_().m_60918_(SoundType.f_154674_).m_60910_().m_60955_()));
        ROOT_BLOCK = TFBlocks.BLOCKS.register("root", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76320_).m_60913_(2.0f, 3.0f).m_60918_(SoundType.f_56736_)));
        LIVEROOT_BLOCK = TFBlocks.BLOCKS.register("liveroot_block", () -> new LiverootBlock(BlockBehaviour.Properties.m_60939_(Material.f_76320_).m_60913_(2.0f, 3.0f).m_60918_(SoundType.f_56736_)));
        UNCRAFTING_TABLE = TFBlocks.BLOCKS.register("uncrafting_table", (Supplier)UncraftingTableBlock::new);
        SMOKER = TFBlocks.BLOCKS.register("smoker", () -> new TFSmokerBlock(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76399_).m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56736_)));
        ENCASED_SMOKER = TFBlocks.BLOCKS.register("encased_smoker", () -> new EncasedSmokerBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60999_().m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56736_)));
        FIRE_JET = TFBlocks.BLOCKS.register("fire_jet", () -> new FireJetBlock(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76399_).m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56736_).m_60977_().m_60953_(state -> (state.m_61143_((Property)FireJetBlock.STATE) != FireJetVariant.FLAME) ? 0 : 15)));
        ENCASED_FIRE_JET = TFBlocks.BLOCKS.register("encased_fire_jet", () -> new EncasedFireJetBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60999_().m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56736_).m_60953_(state -> 15)));
        FIREFLY = TFBlocks.BLOCKS.register("firefly", () -> {
            new FireflyBlock(BlockBehaviour.Properties.m_60939_(new Material.Builder(MaterialColor.f_76399_).m_76354_().m_76353_().m_76359_()).m_60953_(state -> 15).m_60918_(SoundType.f_56750_).m_60966_().m_60910_());
            return;
        });
        CICADA = TFBlocks.BLOCKS.register("cicada", () -> {
            new CicadaBlock(BlockBehaviour.Properties.m_60939_(new Material.Builder(MaterialColor.f_76399_).m_76354_().m_76353_().m_76359_()).m_60918_(SoundType.f_56750_).m_60966_().m_60910_());
            return;
        });
        MOONWORM = TFBlocks.BLOCKS.register("moonworm", () -> {
            new MoonwormBlock(BlockBehaviour.Properties.m_60939_(new Material.Builder(MaterialColor.f_76399_).m_76354_().m_76353_().m_76359_()).m_60953_(state -> 14).m_60918_(SoundType.f_56750_).m_60966_().m_60910_());
            return;
        });
        HUGE_LILY_PAD = TFBlocks.BLOCKS.register("huge_lily_pad", () -> new HugeLilyPadBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_)));
        HUGE_WATER_LILY = TFBlocks.BLOCKS.register("huge_water_lily", () -> new HugeWaterLilyBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_)));
        SLIDER = TFBlocks.BLOCKS.register("slider", (Supplier)SliderBlock::new);
        IRON_LADDER = TFBlocks.BLOCKS.register("iron_ladder", () -> new IronLadderBlock(BlockBehaviour.Properties.m_60939_(Material.f_76310_).m_60999_().m_60913_(5.0f, 6.0f).m_60918_(SoundType.f_56743_).m_60955_()));
        NAGASTONE_HEAD = TFBlocks.BLOCKS.register("nagastone_head", () -> new TFHorizontalBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56742_)));
        NAGASTONE = TFBlocks.BLOCKS.register("nagastone", () -> new NagastoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56742_)));
        SPIRAL_BRICKS = TFBlocks.BLOCKS.register("spiral_bricks", (Supplier)SpiralBrickBlock::new);
        ETCHED_NAGASTONE = TFBlocks.BLOCKS.register("etched_nagastone", () -> new EtchedNagastoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56742_)));
        NAGASTONE_PILLAR = TFBlocks.BLOCKS.register("nagastone_pillar", (Supplier)NagastonePillarBlock::new);
        NAGASTONE_STAIRS_LEFT = TFBlocks.BLOCKS.register("nagastone_stairs_left", () -> new StairBlock(((Block)TFBlocks.ETCHED_NAGASTONE.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.ETCHED_NAGASTONE.get())));
        NAGASTONE_STAIRS_RIGHT = TFBlocks.BLOCKS.register("nagastone_stairs_right", () -> new StairBlock(((Block)TFBlocks.ETCHED_NAGASTONE.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.ETCHED_NAGASTONE.get())));
        MOSSY_ETCHED_NAGASTONE = TFBlocks.BLOCKS.register("mossy_etched_nagastone", () -> new EtchedNagastoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56742_)));
        MOSSY_NAGASTONE_PILLAR = TFBlocks.BLOCKS.register("mossy_nagastone_pillar", (Supplier)NagastonePillarBlock::new);
        MOSSY_NAGASTONE_STAIRS_LEFT = TFBlocks.BLOCKS.register("mossy_nagastone_stairs_left", () -> new StairBlock(((Block)TFBlocks.MOSSY_ETCHED_NAGASTONE.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MOSSY_ETCHED_NAGASTONE.get())));
        MOSSY_NAGASTONE_STAIRS_RIGHT = TFBlocks.BLOCKS.register("mossy_nagastone_stairs_right", () -> new StairBlock(((Block)TFBlocks.MOSSY_ETCHED_NAGASTONE.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MOSSY_ETCHED_NAGASTONE.get())));
        CRACKED_ETCHED_NAGASTONE = TFBlocks.BLOCKS.register("cracked_etched_nagastone", () -> new EtchedNagastoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56742_)));
        CRACKED_NAGASTONE_PILLAR = TFBlocks.BLOCKS.register("cracked_nagastone_pillar", (Supplier)NagastonePillarBlock::new);
        CRACKED_NAGASTONE_STAIRS_LEFT = TFBlocks.BLOCKS.register("cracked_nagastone_stairs_left", () -> new StairBlock(((Block)TFBlocks.CRACKED_ETCHED_NAGASTONE.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CRACKED_ETCHED_NAGASTONE.get())));
        CRACKED_NAGASTONE_STAIRS_RIGHT = TFBlocks.BLOCKS.register("cracked_nagastone_stairs_right", () -> new StairBlock(((Block)TFBlocks.CRACKED_ETCHED_NAGASTONE.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CRACKED_ETCHED_NAGASTONE.get())));
        TWISTED_STONE = TFBlocks.BLOCKS.register("twisted_stone", () -> new RotatedPillarBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(1.5f, 6.0f)));
        TWISTED_STONE_PILLAR = TFBlocks.BLOCKS.register("twisted_stone_pillar", () -> new WallPillarBlock(Material.f_76278_, 12.0, 16.0));
        KEEPSAKE_CASKET = TFBlocks.BLOCKS.register("keepsake_casket", (Supplier)KeepsakeCasketBlock::new);
        BOLD_STONE_PILLAR = TFBlocks.BLOCKS.register("bold_stone_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(1.5f, 6.0f)));
        DEATH_TOME_SPAWNER = TFBlocks.BLOCKS.register("death_tome_spawner", () -> new TomeSpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76320_).m_60978_(2.5f).m_60918_(SoundType.f_56736_)));
        EMPTY_CANOPY_BOOKSHELF = TFBlocks.BLOCKS.register("empty_canopy_bookshelf", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76320_).m_60978_(1.5f).m_60918_(SoundType.f_56736_)));
        CANDELABRA = TFBlocks.BLOCKS.register("candelabra", () -> new CandelabraBlock(BlockBehaviour.Properties.m_60944_(Material.f_76279_, MaterialColor.f_76409_).m_60953_(state -> (state.m_61143_((Property)AbstractLightableBlock.LIGHTING) == AbstractLightableBlock.Lighting.NORMAL) ? 15 : ((state.m_61143_((Property)AbstractLightableBlock.LIGHTING) == AbstractLightableBlock.Lighting.OMINOUS) ? 7 : 0))));
        ZOMBIE_SKULL_CANDLE = TFBlocks.BLOCKS.register("zombie_skull_candle", () -> new SkullCandleBlock((SkullBlock.Type)SkullBlock.Types.ZOMBIE, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50314_)));
        ZOMBIE_WALL_SKULL_CANDLE = TFBlocks.BLOCKS.register("zombie_wall_skull_candle", () -> new WallSkullCandleBlock((SkullBlock.Type)SkullBlock.Types.ZOMBIE, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50314_)));
        SKELETON_SKULL_CANDLE = TFBlocks.BLOCKS.register("skeleton_skull_candle", () -> new SkullCandleBlock((SkullBlock.Type)SkullBlock.Types.SKELETON, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50314_)));
        SKELETON_WALL_SKULL_CANDLE = TFBlocks.BLOCKS.register("skeleton_wall_skull_candle", () -> new WallSkullCandleBlock((SkullBlock.Type)SkullBlock.Types.SKELETON, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50314_)));
        WITHER_SKELE_SKULL_CANDLE = TFBlocks.BLOCKS.register("wither_skeleton_skull_candle", () -> new SkullCandleBlock((SkullBlock.Type)SkullBlock.Types.WITHER_SKELETON, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50314_)));
        WITHER_SKELE_WALL_SKULL_CANDLE = TFBlocks.BLOCKS.register("wither_skeleton_wall_skull_candle", () -> new WallSkullCandleBlock((SkullBlock.Type)SkullBlock.Types.WITHER_SKELETON, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50314_)));
        CREEPER_SKULL_CANDLE = TFBlocks.BLOCKS.register("creeper_skull_candle", () -> new SkullCandleBlock((SkullBlock.Type)SkullBlock.Types.CREEPER, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50314_)));
        CREEPER_WALL_SKULL_CANDLE = TFBlocks.BLOCKS.register("creeper_wall_skull_candle", () -> new WallSkullCandleBlock((SkullBlock.Type)SkullBlock.Types.CREEPER, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50314_)));
        PLAYER_SKULL_CANDLE = TFBlocks.BLOCKS.register("player_skull_candle", () -> new SkullCandleBlock((SkullBlock.Type)SkullBlock.Types.PLAYER, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50314_)));
        PLAYER_WALL_SKULL_CANDLE = TFBlocks.BLOCKS.register("player_wall_skull_candle", () -> new WallSkullCandleBlock((SkullBlock.Type)SkullBlock.Types.PLAYER, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50314_)));
        MAZESTONE = TFBlocks.BLOCKS.register("mazestone", () -> new MazestoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 15.0f).m_60918_(SoundType.f_56742_)));
        MAZESTONE_BRICK = TFBlocks.BLOCKS.register("mazestone_brick", () -> new MazestoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 15.0f).m_60918_(SoundType.f_56742_)));
        CUT_MAZESTONE = TFBlocks.BLOCKS.register("cut_mazestone", () -> new MazestoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 15.0f).m_60918_(SoundType.f_56742_)));
        DECORATIVE_MAZESTONE = TFBlocks.BLOCKS.register("decorative_mazestone", () -> new MazestoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 15.0f).m_60918_(SoundType.f_56742_)));
        CRACKED_MAZESTONE = TFBlocks.BLOCKS.register("cracked_mazestone", () -> new MazestoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 15.0f).m_60918_(SoundType.f_56742_)));
        MOSSY_MAZESTONE = TFBlocks.BLOCKS.register("mossy_mazestone", () -> new MazestoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 15.0f).m_60918_(SoundType.f_56742_)));
        MAZESTONE_MOSAIC = TFBlocks.BLOCKS.register("mazestone_mosaic", () -> new MazestoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 15.0f).m_60918_(SoundType.f_56742_)));
        MAZESTONE_BORDER = TFBlocks.BLOCKS.register("mazestone_border", () -> new MazestoneBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 15.0f).m_60918_(SoundType.f_56742_)));
        STRONGHOLD_SHIELD = TFBlocks.BLOCKS.register("stronghold_shield", () -> new StrongholdShieldBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(-1.0f, 6000000.0f).m_60918_(SoundType.f_56743_).m_60993_()));
        TROPHY_PEDESTAL = TFBlocks.BLOCKS.register("trophy_pedestal", () -> new TrophyPedestalBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(2.0f, 2000.0f).m_60918_(SoundType.f_56742_)));
        UNDERBRICK = TFBlocks.BLOCKS.register("underbrick", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76411_).m_60999_().m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56742_)));
        MOSSY_UNDERBRICK = TFBlocks.BLOCKS.register("mossy_underbrick", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76411_).m_60999_().m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56742_)));
        CRACKED_UNDERBRICK = TFBlocks.BLOCKS.register("cracked_underbrick", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76411_).m_60999_().m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56742_)));
        UNDERBRICK_FLOOR = TFBlocks.BLOCKS.register("underbrick_floor", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76411_).m_60999_().m_60913_(1.5f, 6.0f).m_60918_(SoundType.f_56742_)));
        TOWERWOOD = TFBlocks.BLOCKS.register("towerwood", () -> new FlammableBlock(1, 0, BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76413_).m_60913_(40.0f, 6.0f).m_60918_(SoundType.f_56736_)));
        ENCASED_TOWERWOOD = TFBlocks.BLOCKS.register("encased_towerwood", () -> new FlammableBlock(1, 0, BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60913_(40.0f, 6.0f).m_60918_(SoundType.f_56736_)));
        CRACKED_TOWERWOOD = TFBlocks.BLOCKS.register("cracked_towerwood", () -> new FlammableBlock(1, 0, BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76413_).m_60913_(40.0f, 6.0f).m_60918_(SoundType.f_56736_)));
        MOSSY_TOWERWOOD = TFBlocks.BLOCKS.register("mossy_towerwood", () -> new FlammableBlock(1, 0, BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76413_).m_60913_(40.0f, 6.0f).m_60918_(SoundType.f_56736_)));
        INFESTED_TOWERWOOD = TFBlocks.BLOCKS.register("infested_towerwood", () -> new InfestedTowerwoodBlock(1, 0, BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76413_).m_60913_(1.0f, 6.0f).m_60918_(SoundType.f_56736_)));
        REAPPEARING_BLOCK = TFBlocks.BLOCKS.register("reappearing_block", () -> new ReappearingBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60999_().m_60913_(10.0f, 35.0f).m_60918_(SoundType.f_56736_).m_60953_(state -> 4)));
        VANISHING_BLOCK = TFBlocks.BLOCKS.register("vanishing_block", () -> new VanishingBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60913_(-1.0f, 35.0f).m_60918_(SoundType.f_56736_).m_60953_(state -> state.m_61143_((Property)VanishingBlock.ACTIVE) ? 4 : 0)));
        LOCKED_VANISHING_BLOCK = TFBlocks.BLOCKS.register("locked_vanishing_block", () -> new LockedVanishingBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60913_(-1.0f, 2000.0f).m_60918_(SoundType.f_56736_)));
        CARMINITE_BUILDER = TFBlocks.BLOCKS.register("carminite_builder", () -> new BuilderBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60999_().m_60913_(10.0f, 6.0f).m_60918_(SoundType.f_56736_).m_60953_(state -> (state.m_61143_((Property)BuilderBlock.STATE) == TowerDeviceVariant.BUILDER_ACTIVE) ? 4 : 0)));
        BUILT_BLOCK = TFBlocks.BLOCKS.register("built_block", () -> new TranslucentBuiltBlock(BlockBehaviour.Properties.m_60939_(Material.f_76275_).m_60913_(50.0f, 2000.0f).m_60918_(SoundType.f_56743_).m_60955_().m_60993_()));
        ANTIBUILDER = TFBlocks.BLOCKS.register("antibuilder", () -> new AntibuilderBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60999_().m_60913_(10.0f, 6.0f).m_60918_(SoundType.f_56736_).m_60953_(state -> 10)));
        ANTIBUILT_BLOCK = TFBlocks.BLOCKS.register("antibuilt_block", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76275_).m_60913_(0.3f, 2000.0f).m_60918_(SoundType.f_56743_).m_60993_().m_60955_()));
        GHAST_TRAP = TFBlocks.BLOCKS.register("ghast_trap", () -> new GhastTrapBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60999_().m_60913_(10.0f, 6.0f).m_60918_(SoundType.f_56736_).m_60953_(state -> state.m_61143_((Property)GhastTrapBlock.ACTIVE) ? 15 : 0)));
        CARMINITE_REACTOR = TFBlocks.BLOCKS.register("carminite_reactor", () -> new CarminiteReactorBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60999_().m_60913_(10.0f, 6.0f).m_60918_(SoundType.f_56736_).m_60953_(state -> state.m_61143_((Property)CarminiteReactorBlock.ACTIVE) ? 15 : 0)));
        REACTOR_DEBRIS = TFBlocks.BLOCKS.register("reactor_debris", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76275_).m_60913_(0.3f, 2000.0f).m_60918_(SoundType.f_56743_).m_60993_().m_60955_()));
        FAKE_GOLD = TFBlocks.BLOCKS.register("fake_gold", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76275_).m_60913_(50.0f, 2000.0f).m_60918_(SoundType.f_56743_).m_60993_()));
        FAKE_DIAMOND = TFBlocks.BLOCKS.register("fake_diamond", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76275_).m_60913_(50.0f, 2000.0f).m_60918_(SoundType.f_56743_).m_60993_()));
        EXPERIMENT_115 = TFBlocks.BLOCKS.register("experiment_115", (Supplier)Experiment115Block::new);
        AURORA_BLOCK = TFBlocks.BLOCKS.register("aurora_block", () -> new AuroraBrickBlock(BlockBehaviour.Properties.m_60939_(Material.f_76316_).m_60913_(10.0f, 6.0f)));
        AURORA_PILLAR = TFBlocks.BLOCKS.register("aurora_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.m_60939_(Material.f_76316_).m_60999_().m_60913_(2.0f, 6.0f)));
        AURORA_SLAB = TFBlocks.BLOCKS.register("aurora_slab", () -> new SlabBlock(BlockBehaviour.Properties.m_60939_(Material.f_76316_).m_60999_().m_60913_(2.0f, 6.0f)));
        AURORALIZED_GLASS = TFBlocks.BLOCKS.register("auroralized_glass", () -> new AuroralizedGlassBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50058_).m_60955_()));
        BROWN_THORNS = TFBlocks.BLOCKS.register("brown_thorns", () -> new ThornsBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76370_).m_60913_(50.0f, 2000.0f).m_60918_(SoundType.f_56736_).m_60993_()));
        GREEN_THORNS = TFBlocks.BLOCKS.register("green_thorns", () -> new ThornsBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76405_).m_60913_(50.0f, 2000.0f).m_60918_(SoundType.f_56736_).m_60993_()));
        BURNT_THORNS = TFBlocks.BLOCKS.register("burnt_thorns", () -> new BurntThornsBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76409_).m_60913_(0.01f, 0.0f).m_60918_(SoundType.f_56746_).m_60993_()));
        THORN_ROSE = TFBlocks.BLOCKS.register("thorn_rose", () -> new ThornRoseBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60913_(10.0f, 0.0f).m_60918_(SoundType.f_56740_).m_60910_()));
        THORN_LEAVES = TFBlocks.BLOCKS.register("thorn_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60978_(0.2f).m_60977_().m_60955_().m_60918_(SoundType.f_154674_)));
        BEANSTALK_LEAVES = TFBlocks.BLOCKS.register("beanstalk_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60978_(0.2f).m_60977_().m_60955_().m_60918_(SoundType.f_154674_)));
        DEADROCK = TFBlocks.BLOCKS.register("deadrock", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 6000000.0f).m_60918_(SoundType.f_56742_)));
        CRACKED_DEADROCK = TFBlocks.BLOCKS.register("cracked_deadrock", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 6000000.0f).m_60918_(SoundType.f_56742_)));
        WEATHERED_DEADROCK = TFBlocks.BLOCKS.register("weathered_deadrock", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(100.0f, 6000000.0f).m_60918_(SoundType.f_56742_)));
        TROLLSTEINN = TFBlocks.BLOCKS.register("trollsteinn", () -> new TrollsteinnBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60999_().m_60913_(2.0f, 6.0f).m_60918_(SoundType.f_56742_)));
        WISPY_CLOUD = TFBlocks.BLOCKS.register("wispy_cloud", () -> new HalfTransparentBlock(BlockBehaviour.Properties.m_60939_(Material.f_76308_).m_60913_(0.3f, 0.0f).m_60918_(SoundType.f_56745_).m_60955_()));
        FLUFFY_CLOUD = TFBlocks.BLOCKS.register("fluffy_cloud", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76316_).m_60913_(0.8f, 0.0f).m_60918_(SoundType.f_56745_)));
        GIANT_COBBLESTONE = TFBlocks.BLOCKS.register("giant_cobblestone", () -> new GiantBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50652_).m_60999_().m_60913_(128.0f, 50.0f)));
        GIANT_LOG = TFBlocks.BLOCKS.register("giant_log", () -> new GiantBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50705_).m_60999_().m_60913_(128.0f, 30.0f)));
        GIANT_LEAVES = TFBlocks.BLOCKS.register("giant_leaves", () -> new GiantLeavesBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50050_).m_60999_().m_60913_(12.8f, 15.0f).m_60918_(SoundType.f_154674_).m_60955_()));
        GIANT_OBSIDIAN = TFBlocks.BLOCKS.register("giant_obsidian", () -> new GiantBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50080_).m_60999_().m_60913_(204800.0f, 8192000.0f)));
        UBEROUS_SOIL = TFBlocks.BLOCKS.register("uberous_soil", () -> new UberousSoilBlock(BlockBehaviour.Properties.m_60939_(Material.f_76314_).m_60978_(0.6f).m_60918_(SoundType.f_56739_)));
        HUGE_STALK = TFBlocks.BLOCKS.register("huge_stalk", () -> new RotatedPillarBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76405_).m_60913_(1.5f, 3.0f).m_60918_(SoundType.f_56763_)));
        HUGE_MUSHGLOOM = TFBlocks.BLOCKS.register("huge_mushgloom", () -> new HugeMushroomBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76413_).m_60978_(0.2f).m_60918_(SoundType.f_56736_).m_60953_(state -> 5)));
        HUGE_MUSHGLOOM_STEM = TFBlocks.BLOCKS.register("huge_mushgloom_stem", () -> new HugeMushroomBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76413_).m_60978_(0.2f).m_60918_(SoundType.f_56736_).m_60953_(state -> 5)));
        TROLLVIDR = TFBlocks.BLOCKS.register("trollvidr", () -> new TrollRootBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60918_(SoundType.f_154674_).m_60966_().m_60910_()));
        UNRIPE_TROLLBER = TFBlocks.BLOCKS.register("unripe_trollber", () -> new UnripeTorchClusterBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60918_(SoundType.f_154674_).m_60966_().m_60910_().m_60977_()));
        TROLLBER = TFBlocks.BLOCKS.register("trollber", () -> new TrollRootBlock(BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60918_(SoundType.f_154667_).m_60966_().m_60910_().m_60953_(state -> 15)));
        CASTLE_BRICK = TFBlocks.BLOCKS.register("castle_brick", () -> new CastleBlock(MaterialColor.f_76412_));
        WORN_CASTLE_BRICK = TFBlocks.BLOCKS.register("worn_castle_brick", () -> new CastleBlock(MaterialColor.f_76412_));
        CRACKED_CASTLE_BRICK = TFBlocks.BLOCKS.register("cracked_castle_brick", () -> new CastleBlock(MaterialColor.f_76412_));
        CASTLE_ROOF_TILE = TFBlocks.BLOCKS.register("castle_roof_tile", () -> new CastleBlock(MaterialColor.f_76419_));
        MOSSY_CASTLE_BRICK = TFBlocks.BLOCKS.register("mossy_castle_brick", () -> new CastleBlock(MaterialColor.f_76412_));
        THICK_CASTLE_BRICK = TFBlocks.BLOCKS.register("thick_castle_brick", () -> new CastleBlock(MaterialColor.f_76412_));
        ENCASED_CASTLE_BRICK_PILLAR = TFBlocks.BLOCKS.register("encased_castle_brick_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76412_).m_60999_().m_60913_(100.0f, 50.0f).m_60918_(SoundType.f_56742_)));
        ENCASED_CASTLE_BRICK_TILE = TFBlocks.BLOCKS.register("encased_castle_brick_tile", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76412_).m_60999_().m_60913_(100.0f, 50.0f).m_60918_(SoundType.f_56742_)));
        BOLD_CASTLE_BRICK_PILLAR = TFBlocks.BLOCKS.register("bold_castle_brick_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76412_).m_60999_().m_60913_(100.0f, 50.0f).m_60918_(SoundType.f_56742_)));
        BOLD_CASTLE_BRICK_TILE = TFBlocks.BLOCKS.register("bold_castle_brick_tile", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76412_).m_60999_().m_60913_(100.0f, 50.0f).m_60918_(SoundType.f_56742_)));
        CASTLE_BRICK_STAIRS = TFBlocks.BLOCKS.register("castle_brick_stairs", () -> new StairBlock(((Block)TFBlocks.CASTLE_BRICK.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CASTLE_BRICK.get())));
        WORN_CASTLE_BRICK_STAIRS = TFBlocks.BLOCKS.register("worn_castle_brick_stairs", () -> new StairBlock(((Block)TFBlocks.WORN_CASTLE_BRICK.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.WORN_CASTLE_BRICK.get())));
        CRACKED_CASTLE_BRICK_STAIRS = TFBlocks.BLOCKS.register("cracked_castle_brick_stairs", () -> new StairBlock(((Block)TFBlocks.CRACKED_CASTLE_BRICK.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CRACKED_CASTLE_BRICK.get())));
        MOSSY_CASTLE_BRICK_STAIRS = TFBlocks.BLOCKS.register("mossy_castle_brick_stairs", () -> new StairBlock(((Block)TFBlocks.MOSSY_CASTLE_BRICK.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MOSSY_CASTLE_BRICK.get())));
        ENCASED_CASTLE_BRICK_STAIRS = TFBlocks.BLOCKS.register("encased_castle_brick_stairs", () -> new StairBlock(((Block)TFBlocks.ENCASED_CASTLE_BRICK_PILLAR.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.ENCASED_CASTLE_BRICK_PILLAR.get())));
        BOLD_CASTLE_BRICK_STAIRS = TFBlocks.BLOCKS.register("bold_castle_brick_stairs", () -> new StairBlock(((Block)TFBlocks.BOLD_CASTLE_BRICK_PILLAR.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.BOLD_CASTLE_BRICK_PILLAR.get())));
        PINK_CASTLE_RUNE_BRICK = TFBlocks.BLOCKS.register("pink_castle_rune_brick", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76412_).m_60999_().m_60913_(100.0f, 50.0f).m_60918_(SoundType.f_56742_)));
        BLUE_CASTLE_RUNE_BRICK = TFBlocks.BLOCKS.register("blue_castle_rune_brick", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76412_).m_60999_().m_60913_(100.0f, 50.0f).m_60918_(SoundType.f_56742_)));
        YELLOW_CASTLE_RUNE_BRICK = TFBlocks.BLOCKS.register("yellow_castle_rune_brick", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76412_).m_60999_().m_60913_(100.0f, 50.0f).m_60918_(SoundType.f_56742_)));
        VIOLET_CASTLE_RUNE_BRICK = TFBlocks.BLOCKS.register("violet_castle_rune_brick", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76278_, MaterialColor.f_76412_).m_60999_().m_60913_(100.0f, 50.0f).m_60918_(SoundType.f_56742_)));
        VIOLET_FORCE_FIELD = TFBlocks.BLOCKS.register("violet_force_field", () -> new ForceFieldBlock(BlockBehaviour.Properties.m_60939_(Material.f_76282_).m_60913_(-1.0f, 3600000.8f).m_60953_(state -> 2).m_60993_().m_60955_()));
        PINK_FORCE_FIELD = TFBlocks.BLOCKS.register("pink_force_field", () -> new ForceFieldBlock(BlockBehaviour.Properties.m_60939_(Material.f_76282_).m_60913_(-1.0f, 3600000.8f).m_60953_(state -> 2).m_60993_().m_60955_()));
        ORANGE_FORCE_FIELD = TFBlocks.BLOCKS.register("orange_force_field", () -> new ForceFieldBlock(BlockBehaviour.Properties.m_60939_(Material.f_76282_).m_60913_(-1.0f, 3600000.8f).m_60953_(state -> 2).m_60993_().m_60955_()));
        GREEN_FORCE_FIELD = TFBlocks.BLOCKS.register("green_force_field", () -> new ForceFieldBlock(BlockBehaviour.Properties.m_60939_(Material.f_76282_).m_60913_(-1.0f, 3600000.8f).m_60953_(state -> 2).m_60993_().m_60955_()));
        BLUE_FORCE_FIELD = TFBlocks.BLOCKS.register("blue_force_field", () -> new ForceFieldBlock(BlockBehaviour.Properties.m_60939_(Material.f_76282_).m_60913_(-1.0f, 3600000.8f).m_60953_(state -> 2).m_60993_().m_60955_()));
        CINDER_FURNACE = TFBlocks.BLOCKS.register("cinder_furnace", (Supplier)CinderFurnaceBlock::new);
        CINDER_LOG = TFBlocks.BLOCKS.register("cinder_log", () -> new TFLogBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76419_).m_60978_(1.0f)));
        CINDER_WOOD = TFBlocks.BLOCKS.register("cinder_wood", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76419_).m_60978_(1.0f)));
        YELLOW_CASTLE_DOOR = TFBlocks.BLOCKS.register("yellow_castle_door", () -> new CastleDoorBlock(BlockBehaviour.Properties.m_60947_(Material.f_76278_, state -> state.m_61143_((Property)CastleDoorBlock.VANISHED) ? MaterialColor.f_76398_ : MaterialColor.f_76421_).m_60999_().m_60913_(100.0f, 100.0f)));
        VIOLET_CASTLE_DOOR = TFBlocks.BLOCKS.register("violet_castle_door", () -> new CastleDoorBlock(BlockBehaviour.Properties.m_60947_(Material.f_76278_, state -> state.m_61143_((Property)CastleDoorBlock.VANISHED) ? MaterialColor.f_76398_ : MaterialColor.f_76421_).m_60999_().m_60913_(100.0f, 100.0f)));
        PINK_CASTLE_DOOR = TFBlocks.BLOCKS.register("pink_castle_door", () -> new CastleDoorBlock(BlockBehaviour.Properties.m_60947_(Material.f_76278_, state -> state.m_61143_((Property)CastleDoorBlock.VANISHED) ? MaterialColor.f_76398_ : MaterialColor.f_76421_).m_60999_().m_60913_(100.0f, 100.0f)));
        BLUE_CASTLE_DOOR = TFBlocks.BLOCKS.register("blue_castle_door", () -> new CastleDoorBlock(BlockBehaviour.Properties.m_60947_(Material.f_76278_, state -> state.m_61143_((Property)CastleDoorBlock.VANISHED) ? MaterialColor.f_76398_ : MaterialColor.f_76421_).m_60999_().m_60913_(100.0f, 100.0f)));
        TWILIGHT_PORTAL_MINIATURE_STRUCTURE = TFBlocks.BLOCKS.register("twilight_portal_miniature_structure", (Supplier)MiniatureStructureBlock::new);
        NAGA_COURTYARD_MINIATURE_STRUCTURE = TFBlocks.BLOCKS.register("naga_courtyard_miniature_structure", (Supplier)MiniatureStructureBlock::new);
        LICH_TOWER_MINIATURE_STRUCTURE = TFBlocks.BLOCKS.register("lich_tower_miniature_structure", (Supplier)MiniatureStructureBlock::new);
        KNIGHTMETAL_BLOCK = TFBlocks.BLOCKS.register("knightmetal_block", () -> new KnightmetalBlock(BlockBehaviour.Properties.m_60939_(Material.f_76279_).m_60999_().m_60913_(5.0f, 40.0f).m_60918_(SoundType.f_56725_)));
        IRONWOOD_BLOCK = TFBlocks.BLOCKS.register("ironwood_block", () -> new CompressedBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76411_).m_60913_(5.0f, 6.0f).m_60918_(SoundType.f_56736_)));
        FIERY_BLOCK = TFBlocks.BLOCKS.register("fiery_block", () -> new CompressedBlock(BlockBehaviour.Properties.m_60944_(Material.f_76279_, MaterialColor.f_76388_).m_60999_().m_60913_(5.0f, 6.0f).m_60918_(SoundType.f_56743_).m_60955_().m_60991_((state, world, pos) -> true)));
        STEELEAF_BLOCK = TFBlocks.BLOCKS.register("steeleaf_block", () -> new CompressedBlock(BlockBehaviour.Properties.m_60944_(Material.f_76274_, MaterialColor.f_76405_).m_60913_(5.0f, 6.0f).m_60918_(SoundType.f_154669_)));
        ARCTIC_FUR_BLOCK = TFBlocks.BLOCKS.register("arctic_fur_block", () -> new CompressedBlock(BlockBehaviour.Properties.m_60944_(Material.f_76272_, MaterialColor.f_76401_).m_60978_(0.8f).m_60918_(SoundType.f_56745_)));
        CARMINITE_BLOCK = TFBlocks.BLOCKS.register("carminite_block", () -> new CompressedBlock(BlockBehaviour.Properties.m_60944_(Material.f_76313_, MaterialColor.f_76364_).m_60966_().m_60918_(SoundType.f_56750_)));
        NAGA_BOSS_SPAWNER = TFBlocks.BLOCKS.register("naga_boss_spawner", () -> new BossSpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60913_(-1.0f, 3600000.8f).m_60955_().m_60993_(), BossVariant.NAGA));
        LICH_BOSS_SPAWNER = TFBlocks.BLOCKS.register("lich_boss_spawner", () -> new BossSpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60913_(-1.0f, 3600000.8f).m_60955_().m_60993_(), BossVariant.LICH));
        HYDRA_BOSS_SPAWNER = TFBlocks.BLOCKS.register("hydra_boss_spawner", () -> new BossSpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60913_(-1.0f, 3600000.8f).m_60955_().m_60993_(), BossVariant.HYDRA));
        UR_GHAST_BOSS_SPAWNER = TFBlocks.BLOCKS.register("ur_ghast_boss_spawner", () -> new BossSpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60913_(-1.0f, 3600000.8f).m_60955_().m_60993_(), BossVariant.UR_GHAST));
        KNIGHT_PHANTOM_BOSS_SPAWNER = TFBlocks.BLOCKS.register("knight_phantom_boss_spawner", () -> new BossSpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60913_(-1.0f, 3600000.8f).m_60955_().m_60993_(), BossVariant.KNIGHT_PHANTOM));
        SNOW_QUEEN_BOSS_SPAWNER = TFBlocks.BLOCKS.register("snow_queen_boss_spawner", () -> new BossSpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60913_(-1.0f, 3600000.8f).m_60955_().m_60993_(), BossVariant.SNOW_QUEEN));
        MINOSHROOM_BOSS_SPAWNER = TFBlocks.BLOCKS.register("minoshroom_boss_spawner", () -> new BossSpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60913_(-1.0f, 3600000.8f).m_60955_().m_60993_(), BossVariant.MINOSHROOM));
        ALPHA_YETI_BOSS_SPAWNER = TFBlocks.BLOCKS.register("alpha_yeti_boss_spawner", () -> new BossSpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60913_(-1.0f, 3600000.8f).m_60955_().m_60993_(), BossVariant.ALPHA_YETI));
        FINAL_BOSS_BOSS_SPAWNER = TFBlocks.BLOCKS.register("final_boss_boss_spawner", () -> new BossSpawnerBlock(BlockBehaviour.Properties.m_60939_(Material.f_76278_).m_60913_(-1.0f, 3600000.8f).m_60955_().m_60993_(), BossVariant.FINAL_BOSS));
        NAGA_TROPHY = TFBlocks.BLOCKS.register("naga_trophy", () -> new TrophyBlock(BossVariant.NAGA, 5));
        LICH_TROPHY = TFBlocks.BLOCKS.register("lich_trophy", () -> new TrophyBlock(BossVariant.LICH, 6));
        HYDRA_TROPHY = TFBlocks.BLOCKS.register("hydra_trophy", () -> new TrophyBlock(BossVariant.HYDRA, 12));
        UR_GHAST_TROPHY = TFBlocks.BLOCKS.register("ur_ghast_trophy", () -> new TrophyBlock(BossVariant.UR_GHAST, 13));
        KNIGHT_PHANTOM_TROPHY = TFBlocks.BLOCKS.register("knight_phantom_trophy", () -> new TrophyBlock(BossVariant.KNIGHT_PHANTOM, 8));
        SNOW_QUEEN_TROPHY = TFBlocks.BLOCKS.register("snow_queen_trophy", () -> new TrophyBlock(BossVariant.SNOW_QUEEN, 14));
        MINOSHROOM_TROPHY = TFBlocks.BLOCKS.register("minoshroom_trophy", () -> new TrophyBlock(BossVariant.MINOSHROOM, 7));
        ALPHA_YETI_TROPHY = TFBlocks.BLOCKS.register("alpha_yeti_trophy", () -> new TrophyBlock(BossVariant.ALPHA_YETI, 9));
        QUEST_RAM_TROPHY = TFBlocks.BLOCKS.register("quest_ram_trophy", () -> new TrophyBlock(BossVariant.QUEST_RAM, 1));
        NAGA_WALL_TROPHY = TFBlocks.BLOCKS.register("naga_wall_trophy", () -> new TrophyWallBlock(BossVariant.NAGA));
        LICH_WALL_TROPHY = TFBlocks.BLOCKS.register("lich_wall_trophy", () -> new TrophyWallBlock(BossVariant.LICH));
        HYDRA_WALL_TROPHY = TFBlocks.BLOCKS.register("hydra_wall_trophy", () -> new TrophyWallBlock(BossVariant.HYDRA));
        UR_GHAST_WALL_TROPHY = TFBlocks.BLOCKS.register("ur_ghast_wall_trophy", () -> new TrophyWallBlock(BossVariant.UR_GHAST));
        KNIGHT_PHANTOM_WALL_TROPHY = TFBlocks.BLOCKS.register("knight_phantom_wall_trophy", () -> new TrophyWallBlock(BossVariant.KNIGHT_PHANTOM));
        SNOW_QUEEN_WALL_TROPHY = TFBlocks.BLOCKS.register("snow_queen_wall_trophy", () -> new TrophyWallBlock(BossVariant.SNOW_QUEEN));
        MINOSHROOM_WALL_TROPHY = TFBlocks.BLOCKS.register("minoshroom_wall_trophy", () -> new TrophyWallBlock(BossVariant.MINOSHROOM));
        ALPHA_YETI_WALL_TROPHY = TFBlocks.BLOCKS.register("alpha_yeti_wall_trophy", () -> new TrophyWallBlock(BossVariant.ALPHA_YETI));
        QUEST_RAM_WALL_TROPHY = TFBlocks.BLOCKS.register("quest_ram_wall_trophy", () -> new TrophyWallBlock(BossVariant.QUEST_RAM));
        OAK_BANISTER = TFBlocks.BLOCKS.register("oak_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50705_)));
        SPRUCE_BANISTER = TFBlocks.BLOCKS.register("spruce_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50741_)));
        BIRCH_BANISTER = TFBlocks.BLOCKS.register("birch_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50742_)));
        JUNGLE_BANISTER = TFBlocks.BLOCKS.register("jungle_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50743_)));
        ACACIA_BANISTER = TFBlocks.BLOCKS.register("acacia_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50744_)));
        DARK_OAK_BANISTER = TFBlocks.BLOCKS.register("dark_oak_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50745_)));
        CRIMSON_BANISTER = TFBlocks.BLOCKS.register("crimson_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50655_)));
        WARPED_BANISTER = TFBlocks.BLOCKS.register("warped_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50656_)));
        TWILIGHT_OAK = WoodType.create("twilight_oak");
        CANOPY = WoodType.create("canopy");
        MANGROVE = WoodType.create("mangrove");
        DARKWOOD = WoodType.create("darkwood");
        TIMEWOOD = WoodType.create("timewood");
        TRANSFORMATION = WoodType.create("transformation");
        MINING = WoodType.create("mining");
        SORTING = WoodType.create("sorting");
        TWILIGHT_OAK_LOG_PROPS = logProperties(MaterialColor.f_76411_, MaterialColor.f_76370_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        CANOPY_LOG_PROPS = logProperties(MaterialColor.f_76370_, MaterialColor.f_76362_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        MANGROVE_LOG_PROPS = logProperties(MaterialColor.f_76408_, MaterialColor.f_76370_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        DARK_LOG_PROPS = logProperties(MaterialColor.f_76362_, MaterialColor.f_76409_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        TIME_LOG_PROPS = logProperties(MaterialColor.f_76408_, MaterialColor.f_76370_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        TRANSFORMATION_LOG_PROPS = logProperties(MaterialColor.f_76411_, MaterialColor.f_76370_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        MINING_LOG_PROPS = logProperties(MaterialColor.f_76400_, MaterialColor.f_76412_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        SORTING_LOG_PROPS = logProperties(MaterialColor.f_76370_, MaterialColor.f_76362_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        TWILIGHT_OAK_BARK_PROPS = logProperties(MaterialColor.f_76370_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        CANOPY_BARK_PROPS = logProperties(MaterialColor.f_76362_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        MANGROVE_BARK_PROPS = logProperties(MaterialColor.f_76370_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        DARK_BARK_PROPS = logProperties(MaterialColor.f_76409_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        TIME_BARK_PROPS = logProperties(MaterialColor.f_76370_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        TRANSFORMATION_BARK_PROPS = logProperties(MaterialColor.f_76370_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        MINING_BARK_PROPS = logProperties(MaterialColor.f_76412_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        SORTING_BARK_PROPS = logProperties(MaterialColor.f_76362_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        TWILIGHT_OAK_STRIPPED_PROPS = logProperties(MaterialColor.f_76411_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        CANOPY_STRIPPED_PROPS = logProperties(MaterialColor.f_76370_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        MANGROVE_STRIPPED_PROPS = logProperties(MaterialColor.f_76408_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        DARK_STRIPPED_PROPS = logProperties(MaterialColor.f_76362_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        TIME_STRIPPED_PROPS = logProperties(MaterialColor.f_76408_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        TRANSFORMATION_STRIPPED_PROPS = logProperties(MaterialColor.f_76411_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        MINING_STRIPPED_PROPS = logProperties(MaterialColor.f_76400_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        SORTING_STRIPPED_PROPS = logProperties(MaterialColor.f_76370_).m_60978_(2.0f).m_60918_(SoundType.f_56736_);
        TWILIGHT_OAK_LOG = TFBlocks.BLOCKS.register("twilight_oak_log", () -> new TFLogBlock(TFBlocks.TWILIGHT_OAK_LOG_PROPS));
        CANOPY_LOG = TFBlocks.BLOCKS.register("canopy_log", () -> new TFLogBlock(TFBlocks.CANOPY_LOG_PROPS));
        MANGROVE_LOG = TFBlocks.BLOCKS.register("mangrove_log", () -> new TFLogBlock(TFBlocks.MANGROVE_LOG_PROPS));
        DARK_LOG = TFBlocks.BLOCKS.register("dark_log", () -> new TFLogBlock(TFBlocks.DARK_LOG_PROPS));
        TIME_LOG = TFBlocks.BLOCKS.register("time_log", () -> new TFLogBlock(TFBlocks.TIME_LOG_PROPS));
        TRANSFORMATION_LOG = TFBlocks.BLOCKS.register("transformation_log", () -> new TFLogBlock(TFBlocks.TRANSFORMATION_LOG_PROPS));
        MINING_LOG = TFBlocks.BLOCKS.register("mining_log", () -> new TFLogBlock(TFBlocks.MINING_LOG_PROPS));
        SORTING_LOG = TFBlocks.BLOCKS.register("sorting_log", () -> new TFLogBlock(TFBlocks.SORTING_LOG_PROPS));
        HOLLOW_TWILIGHT_OAK_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_twilight_oak_log_horizontal", () -> new HollowLogHorizontal(TFBlocks.TWILIGHT_OAK_BARK_PROPS));
        HOLLOW_CANOPY_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_canopy_log_horizontal", () -> new HollowLogHorizontal(TFBlocks.CANOPY_BARK_PROPS));
        HOLLOW_MANGROVE_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_mangrove_log_horizontal", () -> new HollowLogHorizontal(TFBlocks.MANGROVE_BARK_PROPS));
        HOLLOW_DARK_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_dark_log_horizontal", () -> new HollowLogHorizontal(TFBlocks.DARK_BARK_PROPS));
        HOLLOW_TIME_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_time_log_horizontal", () -> new HollowLogHorizontal(TFBlocks.TIME_BARK_PROPS));
        HOLLOW_TRANSFORMATION_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_transformation_log_horizontal", () -> new HollowLogHorizontal(TFBlocks.TRANSFORMATION_BARK_PROPS));
        HOLLOW_MINING_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_mining_log_horizontal", () -> new HollowLogHorizontal(TFBlocks.MINING_BARK_PROPS));
        HOLLOW_SORTING_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_sorting_log_horizontal", () -> new HollowLogHorizontal(TFBlocks.SORTING_BARK_PROPS));
        HOLLOW_TWILIGHT_OAK_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_twilight_oak_log_vertical", () -> new HollowLogVertical(TFBlocks.TWILIGHT_OAK_STRIPPED_PROPS, TFBlocks.HOLLOW_TWILIGHT_OAK_LOG_CLIMBABLE));
        HOLLOW_CANOPY_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_canopy_log_vertical", () -> new HollowLogVertical(TFBlocks.CANOPY_STRIPPED_PROPS, TFBlocks.HOLLOW_CANOPY_LOG_CLIMBABLE));
        HOLLOW_MANGROVE_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_mangrove_log_vertical", () -> new HollowLogVertical(TFBlocks.MANGROVE_STRIPPED_PROPS, TFBlocks.HOLLOW_MANGROVE_LOG_CLIMBABLE));
        HOLLOW_DARK_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_dark_log_vertical", () -> new HollowLogVertical(TFBlocks.DARK_STRIPPED_PROPS, TFBlocks.HOLLOW_DARK_LOG_CLIMBABLE));
        HOLLOW_TIME_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_time_log_vertical", () -> new HollowLogVertical(TFBlocks.TIME_STRIPPED_PROPS, TFBlocks.HOLLOW_TIME_LOG_CLIMBABLE));
        HOLLOW_TRANSFORMATION_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_transformation_log_vertical", () -> new HollowLogVertical(TFBlocks.TRANSFORMATION_STRIPPED_PROPS, TFBlocks.HOLLOW_TRANSFORMATION_LOG_CLIMBABLE));
        HOLLOW_MINING_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_mining_log_vertical", () -> new HollowLogVertical(TFBlocks.MINING_STRIPPED_PROPS, TFBlocks.HOLLOW_MINING_LOG_CLIMBABLE));
        HOLLOW_SORTING_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_sorting_log_vertical", () -> new HollowLogVertical(TFBlocks.SORTING_STRIPPED_PROPS, TFBlocks.HOLLOW_SORTING_LOG_CLIMBABLE));
        HOLLOW_TWILIGHT_OAK_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_twilight_oak_log_climbable", () -> new HollowLogClimbable(TFBlocks.TWILIGHT_OAK_STRIPPED_PROPS, TFBlocks.HOLLOW_TWILIGHT_OAK_LOG_VERTICAL));
        HOLLOW_CANOPY_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_canopy_log_climbable", () -> new HollowLogClimbable(TFBlocks.CANOPY_STRIPPED_PROPS, TFBlocks.HOLLOW_CANOPY_LOG_VERTICAL));
        HOLLOW_MANGROVE_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_mangrove_log_climbable", () -> new HollowLogClimbable(TFBlocks.MANGROVE_STRIPPED_PROPS, TFBlocks.HOLLOW_MANGROVE_LOG_VERTICAL));
        HOLLOW_DARK_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_dark_log_climbable", () -> new HollowLogClimbable(TFBlocks.DARK_STRIPPED_PROPS, TFBlocks.HOLLOW_DARK_LOG_VERTICAL));
        HOLLOW_TIME_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_time_log_climbable", () -> new HollowLogClimbable(TFBlocks.TIME_STRIPPED_PROPS, TFBlocks.HOLLOW_TIME_LOG_VERTICAL));
        HOLLOW_TRANSFORMATION_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_transformation_log_climbable", () -> new HollowLogClimbable(TFBlocks.TRANSFORMATION_STRIPPED_PROPS, TFBlocks.HOLLOW_TRANSFORMATION_LOG_VERTICAL));
        HOLLOW_MINING_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_mining_log_climbable", () -> new HollowLogClimbable(TFBlocks.MINING_STRIPPED_PROPS, TFBlocks.HOLLOW_MINING_LOG_VERTICAL));
        HOLLOW_SORTING_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_sorting_log_climbable", () -> new HollowLogClimbable(TFBlocks.SORTING_STRIPPED_PROPS, TFBlocks.HOLLOW_SORTING_LOG_VERTICAL));
        HOLLOW_OAK_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_oak_log_horizontal", () -> new HollowLogHorizontal(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50011_)));
        HOLLOW_SPRUCE_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_spruce_log_horizontal", () -> new HollowLogHorizontal(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50012_)));
        HOLLOW_BIRCH_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_birch_log_horizontal", () -> new HollowLogHorizontal(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50013_)));
        HOLLOW_JUNGLE_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_jungle_log_horizontal", () -> new HollowLogHorizontal(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50014_)));
        HOLLOW_ACACIA_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_acacia_log_horizontal", () -> new HollowLogHorizontal(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50015_)));
        HOLLOW_DARK_OAK_LOG_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_dark_oak_log_horizontal", () -> new HollowLogHorizontal(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50043_)));
        HOLLOW_CRIMSON_STEM_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_crimson_stem_horizontal", () -> new HollowLogHorizontal(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50697_)));
        HOLLOW_WARPED_STEM_HORIZONTAL = TFBlocks.BLOCKS.register("hollow_warped_stem_horizontal", () -> new HollowLogHorizontal(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50688_)));
        HOLLOW_OAK_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_oak_log_vertical", () -> new HollowLogVertical(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50044_), TFBlocks.HOLLOW_OAK_LOG_CLIMBABLE));
        HOLLOW_SPRUCE_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_spruce_log_vertical", () -> new HollowLogVertical(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50045_), TFBlocks.HOLLOW_SPRUCE_LOG_CLIMBABLE));
        HOLLOW_BIRCH_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_birch_log_vertical", () -> new HollowLogVertical(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50046_), TFBlocks.HOLLOW_BIRCH_LOG_CLIMBABLE));
        HOLLOW_JUNGLE_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_jungle_log_vertical", () -> new HollowLogVertical(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50047_), TFBlocks.HOLLOW_JUNGLE_LOG_CLIMBABLE));
        HOLLOW_ACACIA_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_acacia_log_vertical", () -> new HollowLogVertical(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50048_), TFBlocks.HOLLOW_ACACIA_LOG_CLIMBABLE));
        HOLLOW_DARK_OAK_LOG_VERTICAL = TFBlocks.BLOCKS.register("hollow_dark_oak_log_vertical", () -> new HollowLogVertical(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50049_), TFBlocks.HOLLOW_DARK_OAK_LOG_CLIMBABLE));
        HOLLOW_CRIMSON_STEM_VERTICAL = TFBlocks.BLOCKS.register("hollow_crimson_stem_vertical", () -> new HollowLogVertical(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50698_), TFBlocks.HOLLOW_CRIMSON_STEM_CLIMBABLE));
        HOLLOW_WARPED_STEM_VERTICAL = TFBlocks.BLOCKS.register("hollow_warped_stem_vertical", () -> new HollowLogVertical(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50689_), TFBlocks.HOLLOW_WARPED_STEM_CLIMBABLE));
        HOLLOW_OAK_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_oak_log_climbable", () -> new HollowLogClimbable(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50044_), TFBlocks.HOLLOW_OAK_LOG_VERTICAL));
        HOLLOW_SPRUCE_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_spruce_log_climbable", () -> new HollowLogClimbable(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50045_), TFBlocks.HOLLOW_SPRUCE_LOG_VERTICAL));
        HOLLOW_BIRCH_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_birch_log_climbable", () -> new HollowLogClimbable(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50046_), TFBlocks.HOLLOW_BIRCH_LOG_VERTICAL));
        HOLLOW_JUNGLE_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_jungle_log_climbable", () -> new HollowLogClimbable(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50047_), TFBlocks.HOLLOW_JUNGLE_LOG_VERTICAL));
        HOLLOW_ACACIA_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_acacia_log_climbable", () -> new HollowLogClimbable(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50048_), TFBlocks.HOLLOW_ACACIA_LOG_VERTICAL));
        HOLLOW_DARK_OAK_LOG_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_dark_oak_log_climbable", () -> new HollowLogClimbable(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50049_), TFBlocks.HOLLOW_DARK_OAK_LOG_VERTICAL));
        HOLLOW_CRIMSON_STEM_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_crimson_stem_climbable", () -> new HollowLogClimbable(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50698_), TFBlocks.HOLLOW_CRIMSON_STEM_VERTICAL));
        HOLLOW_WARPED_STEM_CLIMBABLE = TFBlocks.BLOCKS.register("hollow_warped_stem_climbable", () -> new HollowLogClimbable(BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50689_), TFBlocks.HOLLOW_WARPED_STEM_VERTICAL));
        STRIPPED_TWILIGHT_OAK_LOG = TFBlocks.BLOCKS.register("stripped_twilight_oak_log", () -> new TFLogBlock(TFBlocks.TWILIGHT_OAK_STRIPPED_PROPS));
        STRIPPED_CANOPY_LOG = TFBlocks.BLOCKS.register("stripped_canopy_log", () -> new TFLogBlock(TFBlocks.CANOPY_STRIPPED_PROPS));
        STRIPPED_MANGROVE_LOG = TFBlocks.BLOCKS.register("stripped_mangrove_log", () -> new TFLogBlock(TFBlocks.MANGROVE_STRIPPED_PROPS));
        STRIPPED_DARK_LOG = TFBlocks.BLOCKS.register("stripped_dark_log", () -> new TFLogBlock(TFBlocks.DARK_STRIPPED_PROPS));
        STRIPPED_TIME_LOG = TFBlocks.BLOCKS.register("stripped_time_log", () -> new TFLogBlock(TFBlocks.TIME_STRIPPED_PROPS));
        STRIPPED_TRANSFORMATION_LOG = TFBlocks.BLOCKS.register("stripped_transformation_log", () -> new TFLogBlock(TFBlocks.TRANSFORMATION_STRIPPED_PROPS));
        STRIPPED_MINING_LOG = TFBlocks.BLOCKS.register("stripped_mining_log", () -> new TFLogBlock(TFBlocks.MINING_STRIPPED_PROPS));
        STRIPPED_SORTING_LOG = TFBlocks.BLOCKS.register("stripped_sorting_log", () -> new TFLogBlock(TFBlocks.SORTING_STRIPPED_PROPS));
        TWILIGHT_OAK_WOOD = TFBlocks.BLOCKS.register("twilight_oak_wood", () -> new TFLogBlock(TFBlocks.TWILIGHT_OAK_BARK_PROPS));
        CANOPY_WOOD = TFBlocks.BLOCKS.register("canopy_wood", () -> new TFLogBlock(TFBlocks.CANOPY_BARK_PROPS));
        MANGROVE_WOOD = TFBlocks.BLOCKS.register("mangrove_wood", () -> new TFLogBlock(TFBlocks.MANGROVE_BARK_PROPS));
        DARK_WOOD = TFBlocks.BLOCKS.register("dark_wood", () -> new TFLogBlock(TFBlocks.DARK_BARK_PROPS));
        TIME_WOOD = TFBlocks.BLOCKS.register("time_wood", () -> new TFLogBlock(TFBlocks.TIME_BARK_PROPS));
        TRANSFORMATION_WOOD = TFBlocks.BLOCKS.register("transformation_wood", () -> new TFLogBlock(TFBlocks.TRANSFORMATION_BARK_PROPS));
        MINING_WOOD = TFBlocks.BLOCKS.register("mining_wood", () -> new TFLogBlock(TFBlocks.MINING_BARK_PROPS));
        SORTING_WOOD = TFBlocks.BLOCKS.register("sorting_wood", () -> new TFLogBlock(TFBlocks.SORTING_BARK_PROPS));
        STRIPPED_TWILIGHT_OAK_WOOD = TFBlocks.BLOCKS.register("stripped_twilight_oak_wood", () -> new TFLogBlock(TFBlocks.TWILIGHT_OAK_STRIPPED_PROPS));
        STRIPPED_CANOPY_WOOD = TFBlocks.BLOCKS.register("stripped_canopy_wood", () -> new TFLogBlock(TFBlocks.CANOPY_STRIPPED_PROPS));
        STRIPPED_MANGROVE_WOOD = TFBlocks.BLOCKS.register("stripped_mangrove_wood", () -> new TFLogBlock(TFBlocks.MANGROVE_STRIPPED_PROPS));
        STRIPPED_DARK_WOOD = TFBlocks.BLOCKS.register("stripped_dark_wood", () -> new TFLogBlock(TFBlocks.DARK_STRIPPED_PROPS));
        STRIPPED_TIME_WOOD = TFBlocks.BLOCKS.register("stripped_time_wood", () -> new TFLogBlock(TFBlocks.TIME_STRIPPED_PROPS));
        STRIPPED_TRANSFORMATION_WOOD = TFBlocks.BLOCKS.register("stripped_transformation_wood", () -> new TFLogBlock(TFBlocks.TRANSFORMATION_STRIPPED_PROPS));
        STRIPPED_MINING_WOOD = TFBlocks.BLOCKS.register("stripped_mining_wood", () -> new TFLogBlock(TFBlocks.MINING_STRIPPED_PROPS));
        STRIPPED_SORTING_WOOD = TFBlocks.BLOCKS.register("stripped_sorting_wood", () -> new TFLogBlock(TFBlocks.SORTING_STRIPPED_PROPS));
        TIME_LOG_CORE = TFBlocks.BLOCKS.register("time_log_core", () -> new TimeLogCoreBlock(TFBlocks.TIME_LOG_PROPS));
        TRANSFORMATION_LOG_CORE = TFBlocks.BLOCKS.register("transformation_log_core", () -> new TransLogCoreBlock(TFBlocks.TRANSFORMATION_LOG_PROPS));
        MINING_LOG_CORE = TFBlocks.BLOCKS.register("mining_log_core", () -> new MineLogCoreBlock(TFBlocks.MINING_LOG_PROPS));
        SORTING_LOG_CORE = TFBlocks.BLOCKS.register("sorting_log_core", () -> new SortLogCoreBlock(TFBlocks.SORTING_LOG_PROPS));
        MANGROVE_ROOT = TFBlocks.BLOCKS.register("mangrove_root", () -> new Block(BlockBehaviour.Properties.m_60939_(Material.f_76320_).m_60978_(2.0f).m_60918_(SoundType.f_56736_)));
        TWILIGHT_OAK_LEAVES = TFBlocks.BLOCKS.register("twilight_oak_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60978_(0.2f).m_60977_().m_60955_().m_60918_(SoundType.f_154674_)));
        CANOPY_LEAVES = TFBlocks.BLOCKS.register("canopy_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60978_(0.2f).m_60977_().m_60955_().m_60918_(SoundType.f_154674_)));
        MANGROVE_LEAVES = TFBlocks.BLOCKS.register("mangrove_leaves", () -> new MangroveLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60978_(0.2f).m_60977_().m_60955_().m_60918_(SoundType.f_154674_)));
        DARK_LEAVES = TFBlocks.BLOCKS.register("dark_leaves", () -> new DarkLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60913_(2.0f, 10.0f).m_60918_(SoundType.f_154674_)));
        HARDENED_DARK_LEAVES = TFBlocks.BLOCKS.register("hardened_dark_leaves", () -> new HardenedDarkLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60913_(2.0f, 10.0f).m_60918_(SoundType.f_154674_)));
        RAINBOW_OAK_LEAVES = TFBlocks.BLOCKS.register("rainbow_oak_leaves", () -> new TFLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60978_(0.2f).m_60977_().m_60955_().m_60918_(SoundType.f_154674_)));
        TIME_LEAVES = TFBlocks.BLOCKS.register("time_leaves", () -> new MagicLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60978_(0.2f).m_60918_(SoundType.f_154674_).m_60977_().m_60955_()));
        TRANSFORMATION_LEAVES = TFBlocks.BLOCKS.register("transformation_leaves", () -> new MagicLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60978_(0.2f).m_60918_(SoundType.f_154674_).m_60977_().m_60955_()));
        MINING_LEAVES = TFBlocks.BLOCKS.register("mining_leaves", () -> new MagicLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60978_(0.2f).m_60918_(SoundType.f_154674_).m_60977_().m_60955_()));
        SORTING_LEAVES = TFBlocks.BLOCKS.register("sorting_leaves", () -> new MagicLeavesBlock(BlockBehaviour.Properties.m_60939_(Material.f_76274_).m_60978_(0.2f).m_60918_(SoundType.f_154674_).m_60977_().m_60955_()));
        TWILIGHT_OAK_SAPLING = TFBlocks.BLOCKS.register("twilight_oak_sapling", () -> {
            new SaplingBlock((AbstractTreeGrower)new SmallOakTree(), BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60977_());
            return;
        });
        CANOPY_SAPLING = TFBlocks.BLOCKS.register("canopy_sapling", () -> {
            new SaplingBlock((AbstractTreeGrower)new CanopyTree(), BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60977_());
            return;
        });
        MANGROVE_SAPLING = TFBlocks.BLOCKS.register("mangrove_sapling", () -> {
            new MangroveSaplingBlock(new MangroveTree(), BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60977_());
            return;
        });
        DARKWOOD_SAPLING = TFBlocks.BLOCKS.register("darkwood_sapling", () -> {
            new SaplingBlock((AbstractTreeGrower)new DarkCanopyTree(), BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60977_());
            return;
        });
        HOLLOW_OAK_SAPLING = TFBlocks.BLOCKS.register("hollow_oak_sapling", () -> {
            new SaplingBlock((AbstractTreeGrower)new HollowTree(), BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60977_());
            return;
        });
        TIME_SAPLING = TFBlocks.BLOCKS.register("time_sapling", () -> {
            new SaplingBlock((AbstractTreeGrower)new TimeTree(), BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60977_());
            return;
        });
        TRANSFORMATION_SAPLING = TFBlocks.BLOCKS.register("transformation_sapling", () -> {
            new SaplingBlock((AbstractTreeGrower)new TransformationTree(), BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60977_());
            return;
        });
        MINING_SAPLING = TFBlocks.BLOCKS.register("mining_sapling", () -> {
            new SaplingBlock((AbstractTreeGrower)new MinersTree(), BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60977_());
            return;
        });
        SORTING_SAPLING = TFBlocks.BLOCKS.register("sorting_sapling", () -> {
            new SaplingBlock((AbstractTreeGrower)new SortingTree(), BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60977_());
            return;
        });
        RAINBOW_OAK_SAPLING = TFBlocks.BLOCKS.register("rainbow_oak_sapling", () -> {
            new SaplingBlock((AbstractTreeGrower)new RainboakTree(), BlockBehaviour.Properties.m_60939_(Material.f_76300_).m_60966_().m_60918_(SoundType.f_56740_).m_60910_().m_60977_());
            return;
        });
        TWILIGHT_OAK_PLANKS = TFBlocks.BLOCKS.register("twilight_oak_planks", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76411_).m_60913_(2.0f, 3.0f).m_60918_(SoundType.f_56736_)));
        TWILIGHT_OAK_STAIRS = TFBlocks.BLOCKS.register("twilight_oak_stairs", () -> new StairBlock(((Block)TFBlocks.TWILIGHT_OAK_PLANKS.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get())));
        TWILIGHT_OAK_SLAB = TFBlocks.BLOCKS.register("twilight_oak_slab", () -> new SlabBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get())));
        TWILIGHT_OAK_BUTTON = TFBlocks.BLOCKS.register("twilight_oak_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        TWILIGHT_OAK_FENCE = TFBlocks.BLOCKS.register("twilight_oak_fence", () -> new FenceBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get())));
        TWILIGHT_OAK_GATE = TFBlocks.BLOCKS.register("twilight_oak_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get())));
        TWILIGHT_OAK_PLATE = TFBlocks.BLOCKS.register("twilight_oak_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        TWILIGHT_OAK_DOOR = TFBlocks.BLOCKS.register("twilight_oak_door", () -> new DoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get()).m_60978_(3.0f).m_60918_(SoundType.f_56736_).m_60955_()));
        TWILIGHT_OAK_TRAPDOOR = TFBlocks.BLOCKS.register("twilight_oak_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        TWILIGHT_OAK_SIGN = TFBlocks.BLOCKS.register("twilight_oak_sign", () -> new TFSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get()).m_60978_(3.0f).m_60955_().m_60910_(), TFBlocks.TWILIGHT_OAK));
        TWILIGHT_WALL_SIGN = TFBlocks.BLOCKS.register("twilight_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get()).m_60978_(3.0f).m_60955_().m_60910_(), TFBlocks.TWILIGHT_OAK));
        TWILIGHT_OAK_BANISTER = TFBlocks.BLOCKS.register("twilight_oak_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get())));
        CANOPY_PLANKS = TFBlocks.BLOCKS.register("canopy_planks", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76370_).m_60913_(2.0f, 3.0f).m_60918_(SoundType.f_56736_)));
        CANOPY_STAIRS = TFBlocks.BLOCKS.register("canopy_stairs", () -> new StairBlock(((Block)TFBlocks.CANOPY_PLANKS.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get())));
        CANOPY_SLAB = TFBlocks.BLOCKS.register("canopy_slab", () -> new SlabBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get())));
        CANOPY_BUTTON = TFBlocks.BLOCKS.register("canopy_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        CANOPY_FENCE = TFBlocks.BLOCKS.register("canopy_fence", () -> new FenceBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get())));
        CANOPY_GATE = TFBlocks.BLOCKS.register("canopy_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get())));
        CANOPY_PLATE = TFBlocks.BLOCKS.register("canopy_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        CANOPY_DOOR = TFBlocks.BLOCKS.register("canopy_door", () -> new DoorBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76370_).m_60978_(3.0f).m_60955_()));
        CANOPY_TRAPDOOR = TFBlocks.BLOCKS.register("canopy_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60978_(3.0f).m_60918_(SoundType.f_56736_).m_60955_()));
        CANOPY_SIGN = TFBlocks.BLOCKS.register("canopy_sign", () -> new TFSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.CANOPY));
        CANOPY_WALL_SIGN = TFBlocks.BLOCKS.register("canopy_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.CANOPY));
        CANOPY_BOOKSHELF = TFBlocks.BLOCKS.register("canopy_bookshelf", () -> new BookshelfBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get()).m_60978_(1.5f)));
        CANOPY_BANISTER = TFBlocks.BLOCKS.register("canopy_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get())));
        MANGROVE_PLANKS = TFBlocks.BLOCKS.register("mangrove_planks", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76408_).m_60913_(2.0f, 3.0f).m_60918_(SoundType.f_56736_)));
        MANGROVE_STAIRS = TFBlocks.BLOCKS.register("mangrove_stairs", () -> new StairBlock(((Block)TFBlocks.MANGROVE_PLANKS.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get())));
        MANGROVE_SLAB = TFBlocks.BLOCKS.register("mangrove_slab", () -> new SlabBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get())));
        MANGROVE_BUTTON = TFBlocks.BLOCKS.register("mangrove_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        MANGROVE_FENCE = TFBlocks.BLOCKS.register("mangrove_fence", () -> new FenceBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get())));
        MANGROVE_GATE = TFBlocks.BLOCKS.register("mangrove_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get())));
        MANGROVE_PLATE = TFBlocks.BLOCKS.register("mangrove_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        MANGROVE_DOOR = TFBlocks.BLOCKS.register("mangrove_door", () -> new DoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        MANGROVE_TRAPDOOR = TFBlocks.BLOCKS.register("mangrove_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        MANGROVE_SIGN = TFBlocks.BLOCKS.register("mangrove_sign", () -> new TFSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.MANGROVE));
        MANGROVE_WALL_SIGN = TFBlocks.BLOCKS.register("mangrove_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.MANGROVE));
        MANGROVE_BANISTER = TFBlocks.BLOCKS.register("mangrove_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get())));
        DARK_PLANKS = TFBlocks.BLOCKS.register("dark_planks", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76413_).m_60913_(2.0f, 3.0f).m_60918_(SoundType.f_56736_)));
        DARK_STAIRS = TFBlocks.BLOCKS.register("dark_stairs", () -> new StairBlock(((Block)TFBlocks.DARK_PLANKS.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get())));
        DARK_SLAB = TFBlocks.BLOCKS.register("dark_slab", () -> new SlabBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get()).m_60918_(SoundType.f_56736_)));
        DARK_BUTTON = TFBlocks.BLOCKS.register("dark_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        DARK_FENCE = TFBlocks.BLOCKS.register("dark_fence", () -> new FenceBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get())));
        DARK_GATE = TFBlocks.BLOCKS.register("dark_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get())));
        DARK_PLATE = TFBlocks.BLOCKS.register("dark_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        DARK_DOOR = TFBlocks.BLOCKS.register("dark_door", () -> new DoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get()).m_60978_(3.0f).m_60918_(SoundType.f_56736_).m_60955_()));
        DARK_TRAPDOOR = TFBlocks.BLOCKS.register("dark_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        DARKWOOD_SIGN = TFBlocks.BLOCKS.register("darkwood_sign", () -> new TFSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.DARKWOOD));
        DARKWOOD_WALL_SIGN = TFBlocks.BLOCKS.register("darkwood_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.DARKWOOD));
        DARKWOOD_BANISTER = TFBlocks.BLOCKS.register("darkwood_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get())));
        TIME_PLANKS = TFBlocks.BLOCKS.register("time_planks", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76408_).m_60913_(2.0f, 3.0f).m_60918_(SoundType.f_56736_)));
        TIME_STAIRS = TFBlocks.BLOCKS.register("time_stairs", () -> new StairBlock(((Block)TFBlocks.TIME_PLANKS.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get())));
        TIME_SLAB = TFBlocks.BLOCKS.register("time_slab", () -> new SlabBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get()).m_60918_(SoundType.f_56736_)));
        TIME_BUTTON = TFBlocks.BLOCKS.register("time_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        TIME_FENCE = TFBlocks.BLOCKS.register("time_fence", () -> new FenceBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get())));
        TIME_GATE = TFBlocks.BLOCKS.register("time_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get())));
        TIME_PLATE = TFBlocks.BLOCKS.register("time_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        TIME_DOOR = TFBlocks.BLOCKS.register("time_door", () -> new DoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get()).m_60978_(3.0f).m_60918_(SoundType.f_56736_).m_60955_()));
        TIME_TRAPDOOR = TFBlocks.BLOCKS.register("time_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        TIME_SIGN = TFBlocks.BLOCKS.register("time_sign", () -> new TFSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.TIMEWOOD));
        TIME_WALL_SIGN = TFBlocks.BLOCKS.register("time_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.TIMEWOOD));
        TIME_BANISTER = TFBlocks.BLOCKS.register("time_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get())));
        TRANSFORMATION_PLANKS = TFBlocks.BLOCKS.register("transformation_planks", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76411_).m_60913_(2.0f, 3.0f).m_60918_(SoundType.f_56736_)));
        TRANSFORMATION_STAIRS = TFBlocks.BLOCKS.register("transformation_stairs", () -> new StairBlock(((Block)TFBlocks.TRANSFORMATION_PLANKS.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get())));
        TRANSFORMATION_SLAB = TFBlocks.BLOCKS.register("transformation_slab", () -> new SlabBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get())));
        TRANSFORMATION_BUTTON = TFBlocks.BLOCKS.register("transformation_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        TRANSFORMATION_FENCE = TFBlocks.BLOCKS.register("transformation_fence", () -> new FenceBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get())));
        TRANSFORMATION_GATE = TFBlocks.BLOCKS.register("transformation_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get())));
        TRANSFORMATION_PLATE = TFBlocks.BLOCKS.register("transformation_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        TRANSFORMATION_DOOR = TFBlocks.BLOCKS.register("transformation_door", () -> new DoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        TRANSFORMATION_TRAPDOOR = TFBlocks.BLOCKS.register("transformation_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        TRANSFORMATION_SIGN = TFBlocks.BLOCKS.register("transformation_sign", () -> new TFSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.TRANSFORMATION));
        TRANSFORMATION_WALL_SIGN = TFBlocks.BLOCKS.register("transformation_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.TRANSFORMATION));
        TRANSFORMATION_BANISTER = TFBlocks.BLOCKS.register("transformation_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get())));
        MINING_PLANKS = TFBlocks.BLOCKS.register("mining_planks", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76400_).m_60913_(2.0f, 3.0f).m_60918_(SoundType.f_56736_)));
        MINING_STAIRS = TFBlocks.BLOCKS.register("mining_stairs", () -> new StairBlock(((Block)TFBlocks.MINING_PLANKS.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get())));
        MINING_SLAB = TFBlocks.BLOCKS.register("mining_slab", () -> new SlabBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get())));
        MINING_BUTTON = TFBlocks.BLOCKS.register("mining_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        MINING_FENCE = TFBlocks.BLOCKS.register("mining_fence", () -> new FenceBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get())));
        MINING_GATE = TFBlocks.BLOCKS.register("mining_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get())));
        MINING_PLATE = TFBlocks.BLOCKS.register("mining_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        MINING_DOOR = TFBlocks.BLOCKS.register("mining_door", () -> new DoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        MINING_TRAPDOOR = TFBlocks.BLOCKS.register("mining_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        MINING_SIGN = TFBlocks.BLOCKS.register("mining_sign", () -> new TFSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.MINING));
        MINING_WALL_SIGN = TFBlocks.BLOCKS.register("mining_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.MINING));
        MINING_BANISTER = TFBlocks.BLOCKS.register("mining_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get())));
        SORTING_PLANKS = TFBlocks.BLOCKS.register("sorting_planks", () -> new Block(BlockBehaviour.Properties.m_60944_(Material.f_76320_, MaterialColor.f_76370_).m_60913_(2.0f, 3.0f).m_60918_(SoundType.f_56736_)));
        SORTING_STAIRS = TFBlocks.BLOCKS.register("sorting_stairs", () -> new StairBlock(((Block)TFBlocks.SORTING_PLANKS.get()).m_49966_(), BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get())));
        SORTING_SLAB = TFBlocks.BLOCKS.register("sorting_slab", () -> new SlabBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get())));
        SORTING_BUTTON = TFBlocks.BLOCKS.register("sorting_button", () -> new WoodButtonBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        SORTING_FENCE = TFBlocks.BLOCKS.register("sorting_fence", () -> new FenceBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get())));
        SORTING_GATE = TFBlocks.BLOCKS.register("sorting_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get())));
        SORTING_PLATE = TFBlocks.BLOCKS.register("sorting_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get()).m_60910_().m_60978_(0.5f)));
        SORTING_DOOR = TFBlocks.BLOCKS.register("sorting_door", () -> new DoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        SORTING_TRAPDOOR = TFBlocks.BLOCKS.register("sorting_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get()).m_60978_(3.0f).m_60955_()));
        SORTING_SIGN = TFBlocks.BLOCKS.register("sorting_sign", () -> new TFSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.SORTING));
        SORTING_WALL_SIGN = TFBlocks.BLOCKS.register("sorting_wall_sign", () -> new TFWallSignBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get()).m_60978_(1.0f).m_60955_().m_60910_(), TFBlocks.SORTING));
        SORTING_BANISTER = TFBlocks.BLOCKS.register("sorting_banister", () -> new BanisterBlock(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get())));
        TWILIGHT_OAK_CHEST = TFBlocks.BLOCKS.register("twilight_oak_chest", () -> new TwilightChest(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TWILIGHT_OAK_PLANKS.get()).m_60978_(2.5f)));
        CANOPY_CHEST = TFBlocks.BLOCKS.register("canopy_chest", () -> new TwilightChest(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.CANOPY_PLANKS.get()).m_60978_(2.5f)));
        MANGROVE_CHEST = TFBlocks.BLOCKS.register("mangrove_chest", () -> new TwilightChest(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MANGROVE_PLANKS.get()).m_60978_(2.5f)));
        DARKWOOD_CHEST = TFBlocks.BLOCKS.register("darkwood_chest", () -> new TwilightChest(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.DARK_PLANKS.get()).m_60978_(2.5f)));
        TIME_CHEST = TFBlocks.BLOCKS.register("time_chest", () -> new TwilightChest(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TIME_PLANKS.get()).m_60978_(2.5f)));
        TRANSFORMATION_CHEST = TFBlocks.BLOCKS.register("transformation_chest", () -> new TwilightChest(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.TRANSFORMATION_PLANKS.get()).m_60978_(2.5f)));
        MINING_CHEST = TFBlocks.BLOCKS.register("mining_chest", () -> new TwilightChest(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.MINING_PLANKS.get()).m_60978_(2.5f)));
        SORTING_CHEST = TFBlocks.BLOCKS.register("sorting_chest", () -> new TwilightChest(BlockBehaviour.Properties.m_60926_((BlockBehaviour)TFBlocks.SORTING_PLANKS.get()).m_60978_(2.5f)));
        POTTED_TWILIGHT_OAK_SAPLING = TFBlocks.BLOCKS.register("potted_twilight_oak_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.TWILIGHT_OAK_SAPLING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_CANOPY_SAPLING = TFBlocks.BLOCKS.register("potted_canopy_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.CANOPY_SAPLING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_MANGROVE_SAPLING = TFBlocks.BLOCKS.register("potted_mangrove_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.MANGROVE_SAPLING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_DARKWOOD_SAPLING = TFBlocks.BLOCKS.register("potted_darkwood_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.DARKWOOD_SAPLING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_HOLLOW_OAK_SAPLING = TFBlocks.BLOCKS.register("potted_hollow_oak_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.HOLLOW_OAK_SAPLING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_RAINBOW_OAK_SAPLING = TFBlocks.BLOCKS.register("potted_rainbow_oak_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.RAINBOW_OAK_SAPLING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_TIME_SAPLING = TFBlocks.BLOCKS.register("potted_time_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.TIME_SAPLING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_TRANSFORMATION_SAPLING = TFBlocks.BLOCKS.register("potted_transformation_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.TRANSFORMATION_SAPLING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_MINING_SAPLING = TFBlocks.BLOCKS.register("potted_mining_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.MINING_SAPLING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_SORTING_SAPLING = TFBlocks.BLOCKS.register("potted_sorting_sapling", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.SORTING_SAPLING, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_MAYAPPLE = TFBlocks.BLOCKS.register("potted_mayapple", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.MAYAPPLE, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_FIDDLEHEAD = TFBlocks.BLOCKS.register("potted_fiddlehead", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.FIDDLEHEAD, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_MUSHGLOOM = TFBlocks.BLOCKS.register("potted_mushgloom", () -> new FlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier)TFBlocks.MUSHGLOOM, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_THORN = TFBlocks.BLOCKS.register("potted_thorn", () -> new SpecialFlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier<? extends Block>)TFBlocks.BROWN_THORNS, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_GREEN_THORN = TFBlocks.BLOCKS.register("potted_green_thorn", () -> new SpecialFlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier<? extends Block>)TFBlocks.GREEN_THORNS, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
        POTTED_DEAD_THORN = TFBlocks.BLOCKS.register("potted_dead_thorn", () -> new SpecialFlowerPotBlock(() -> (FlowerPotBlock)Blocks.f_50276_, (Supplier<? extends Block>)TFBlocks.BURNT_THORNS, BlockBehaviour.Properties.m_60926_((BlockBehaviour)Blocks.f_50276_)));
    }
}
